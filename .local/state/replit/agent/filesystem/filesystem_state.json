{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFinanFamily is a personal financial management application designed for family use. The application provides a comprehensive dashboard for tracking bills, income, expenses, and financial goals. It features AI-powered financial advice, automated bill reminders via email, and detailed analytics to help families manage their finances effectively.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React + TypeScript**: Modern React application with TypeScript for type safety\n- **Vite**: Fast build tool and development server with hot module replacement\n- **Tailwind CSS**: Utility-first CSS framework for styling with custom design system\n- **Shadcn/ui Components**: Pre-built, accessible UI components based on Radix UI primitives\n- **Wouter**: Lightweight client-side routing library\n- **React Query**: Server state management and data fetching with caching\n- **React Hook Form**: Form handling with Zod validation schemas\n\n## Backend Architecture\n- **Express.js**: Node.js web framework handling API routes and middleware\n- **TypeScript**: Full-stack type safety with shared schemas\n- **RESTful API**: Standard HTTP methods for CRUD operations\n- **Session-based Storage**: In-memory storage implementation with interface for future database migration\n- **Middleware Stack**: Request logging, JSON parsing, and error handling\n\n## Data Storage Solutions\n- **PostgreSQL with Drizzle ORM**: Configured for production database with migration support\n- **Neon Database**: Serverless PostgreSQL provider for cloud deployment\n- **In-Memory Storage**: Development fallback with full interface compatibility\n- **Shared Schema**: TypeScript schemas shared between client and server using Zod validation\n\n## Authentication and Authorization\n- **Session-based Authentication**: User sessions with cookie management\n- **User Context**: Centralized user state management\n- **Route Protection**: Authentication checks on protected API endpoints\n\n## Design System\n- **CSS Variables**: Dynamic theming with light/dark mode support\n- **Component Variants**: Consistent UI patterns using class-variance-authority\n- **Responsive Design**: Mobile-first approach with breakpoint-based layouts\n- **Icon System**: FontAwesome integration for consistent iconography\n\n## Data Flow Architecture\n- **Component-based State**: Local state management in React components\n- **Server State Caching**: React Query handles API data caching and synchronization\n- **Form State**: React Hook Form manages form state with validation\n- **Real-time Updates**: Periodic data refreshing for dashboard metrics\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini AI**: Financial advice generation and bill pattern analysis using the newest Gemini 2.5 models\n- **AI Assistant Service**: Custom wrapper for generating personalized financial recommendations\n\n## Email Services\n- **SendGrid**: Transactional email service for bill reminders and notifications\n- **Email Templates**: HTML email templates for bill reminders and overdue notifications\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Development Tools\n- **Replit Integration**: Development environment with runtime error handling\n- **Cartographer Plugin**: Development navigation assistance\n- **Dev Banner**: Development environment indicators\n\n## UI Component Libraries\n- **Radix UI**: Headless UI primitives for accessibility and keyboard navigation\n- **Recharts**: Chart and visualization library for financial analytics\n- **Date-fns**: Date manipulation and formatting utilities\n- **Lucide React**: Icon library for modern interface elements\n\n## Utility Libraries\n- **Class Variance Authority**: Type-safe component variant management\n- **CLSX + Tailwind Merge**: Conditional CSS class composition\n- **React Day Picker**: Calendar component for date selection\n- **Embla Carousel**: Touch-friendly carousel implementation","size_bytes":4060},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2991},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertBillSchema, \n  insertIncomeSchema, \n  insertNotificationSchema,\n  insertCategorySchema \n} from \"@shared/schema\";\nimport { getAIFinancialAdvice, analyzeBillPatterns, type FinancialData } from \"./services/aiAssistant\";\nimport { sendBillReminderEmail, sendOverdueNotificationEmail } from \"./services/emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Dashboard data\n  app.get(\"/api/dashboard/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth() + 1;\n      const currentYear = currentDate.getFullYear();\n\n      const [bills, incomes, transactions, categories] = await Promise.all([\n        storage.getBills(userId),\n        storage.getIncomes(userId),\n        storage.getTransactions(userId, currentMonth, currentYear),\n        storage.getCategories(userId)\n      ]);\n\n      // Calculate monthly totals\n      const monthlyIncome = incomes\n        .filter(i => i.isRecurring)\n        .reduce((sum, income) => sum + parseFloat(income.amount), 0);\n\n      const monthlyExpenses = bills\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      // Calculate category breakdown\n      const categoryBreakdown = categories.map(category => {\n        const categoryBills = bills.filter(b => b.categoryId === category.id);\n        const totalAmount = categoryBills.reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n        const percentage = monthlyExpenses > 0 ? (totalAmount / monthlyExpenses) * 100 : 0;\n        \n        return {\n          ...category,\n          totalAmount,\n          percentage: Math.round(percentage * 10) / 10\n        };\n      }).filter(c => c.totalAmount > 0);\n\n      // Get upcoming bills (next 7 days)\n      const today = currentDate.getDate();\n      const upcomingBills = bills.filter(bill => {\n        const daysUntilDue = bill.dueDay - today;\n        return daysUntilDue >= 0 && daysUntilDue <= 7;\n      }).length;\n\n      res.json({\n        monthlyIncome,\n        monthlyExpenses,\n        monthlyBalance: monthlyIncome - monthlyExpenses,\n        upcomingBills,\n        bills,\n        incomes,\n        categories,\n        categoryBreakdown,\n        transactions\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao carregar dashboard\" });\n    }\n  });\n\n  // Bills routes\n  app.get(\"/api/bills/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const bills = await storage.getBills(userId);\n      res.json(bills);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao carregar contas\" });\n    }\n  });\n\n  app.post(\"/api/bills/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const validatedBill = insertBillSchema.parse(req.body);\n      const bill = await storage.createBill(userId, validatedBill);\n      res.status(201).json(bill);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados inválidos para criação da conta\" });\n    }\n  });\n\n  app.patch(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const bill = await storage.updateBill(id, req.body);\n      if (!bill) {\n        return res.status(404).json({ message: \"Conta não encontrada\" });\n      }\n      res.json(bill);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao atualizar conta\" });\n    }\n  });\n\n  app.delete(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteBill(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Conta não encontrada\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao deletar conta\" });\n    }\n  });\n\n  // Incomes routes\n  app.get(\"/api/incomes/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const incomes = await storage.getIncomes(userId);\n      res.json(incomes);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao carregar receitas\" });\n    }\n  });\n\n  app.post(\"/api/incomes/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const validatedIncome = insertIncomeSchema.parse(req.body);\n      const income = await storage.createIncome(userId, validatedIncome);\n      res.status(201).json(income);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados inválidos para criação da receita\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const categories = await storage.getCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao carregar categorias\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const validatedCategory = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedCategory);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados inválidos para criação da categoria\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { isRead } = req.query;\n      const notifications = await storage.getNotifications(\n        userId, \n        isRead !== undefined ? isRead === 'true' : undefined\n      );\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao carregar notificações\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const validatedNotification = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(userId, validatedNotification);\n      res.status(201).json(notification);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados inválidos para criação da notificação\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.markNotificationAsRead(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Notificação não encontrada\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao marcar notificação como lida\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:userId/read-all\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const success = await storage.markAllNotificationsAsRead(userId);\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao marcar todas as notificações como lidas\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/ai-advice/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      const [bills, incomes, categories] = await Promise.all([\n        storage.getBills(userId),\n        storage.getIncomes(userId),\n        storage.getCategories(userId)\n      ]);\n\n      const monthlyIncome = incomes\n        .filter(i => i.isRecurring)\n        .reduce((sum, income) => sum + parseFloat(income.amount), 0);\n\n      const monthlyExpenses = bills\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      const categoryBreakdown = categories.map(category => {\n        const categoryBills = bills.filter(b => b.categoryId === category.id);\n        const totalAmount = categoryBills.reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n        const percentage = monthlyExpenses > 0 ? (totalAmount / monthlyExpenses) * 100 : 0;\n        \n        return {\n          name: category.name,\n          totalAmount,\n          percentage: Math.round(percentage * 10) / 10\n        };\n      }).filter(c => c.totalAmount > 0);\n\n      const financialData: FinancialData = {\n        monthlyIncome,\n        monthlyExpenses,\n        bills: bills.map(b => ({\n          name: b.name,\n          amount: parseFloat(b.amount),\n          category: categories.find(c => c.id === b.categoryId)?.name || \"Outros\",\n          dueDay: b.dueDay\n        })),\n        categories: categoryBreakdown\n      };\n\n      const advice = await getAIFinancialAdvice(financialData);\n      res.json(advice);\n    } catch (error) {\n      console.error(\"AI advice error:\", error);\n      res.status(500).json({ message: \"Erro ao obter dicas da IA\" });\n    }\n  });\n\n  app.post(\"/api/ai-analysis/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      const [bills, incomes, categories] = await Promise.all([\n        storage.getBills(userId),\n        storage.getIncomes(userId),\n        storage.getCategories(userId)\n      ]);\n\n      const monthlyIncome = incomes\n        .filter(i => i.isRecurring)\n        .reduce((sum, income) => sum + parseFloat(income.amount), 0);\n\n      const monthlyExpenses = bills\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      const financialData: FinancialData = {\n        monthlyIncome,\n        monthlyExpenses,\n        bills: bills.map(b => ({\n          name: b.name,\n          amount: parseFloat(b.amount),\n          category: categories.find(c => c.id === b.categoryId)?.name || \"Outros\",\n          dueDay: b.dueDay\n        })),\n        categories: []\n      };\n\n      const analysis = await analyzeBillPatterns(financialData);\n      res.json({ analysis });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao obter análise da IA\" });\n    }\n  });\n\n  // Email notification routes\n  app.post(\"/api/send-reminders/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n\n      const bills = await storage.getBills(userId);\n      const today = new Date();\n      const currentDay = today.getDate();\n\n      // Find bills due in the next 3 days\n      const upcomingBills = bills.filter(bill => {\n        const daysUntilDue = bill.dueDay - currentDay;\n        return daysUntilDue >= 0 && daysUntilDue <= 3;\n      });\n\n      const emailResults = await Promise.all(\n        upcomingBills.map(bill => \n          sendBillReminderEmail(\n            user.email || \"daniel@email.com\",\n            user.name,\n            bill.name,\n            bill.amount,\n            `${bill.dueDay}/${today.getMonth() + 1}/${today.getFullYear()}`\n          )\n        )\n      );\n\n      res.json({ \n        sent: emailResults.filter(Boolean).length,\n        total: upcomingBills.length \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao enviar lembretes\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11106},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Category, type InsertCategory,\n  type Bill, type InsertBill,\n  type Income, type InsertIncome,\n  type Transaction, type InsertTransaction,\n  type Notification, type InsertNotification\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Categories\n  getCategories(userId: string): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  getCategory(id: string): Promise<Category | undefined>;\n\n  // Bills\n  getBills(userId: string): Promise<Bill[]>;\n  getBill(id: string): Promise<Bill | undefined>;\n  createBill(userId: string, bill: InsertBill): Promise<Bill>;\n  updateBill(id: string, bill: Partial<Bill>): Promise<Bill | undefined>;\n  deleteBill(id: string): Promise<boolean>;\n\n  // Incomes\n  getIncomes(userId: string): Promise<Income[]>;\n  getIncome(id: string): Promise<Income | undefined>;\n  createIncome(userId: string, income: InsertIncome): Promise<Income>;\n  updateIncome(id: string, income: Partial<Income>): Promise<Income | undefined>;\n  deleteIncome(id: string): Promise<boolean>;\n\n  // Transactions\n  getTransactions(userId: string, month?: number, year?: number): Promise<Transaction[]>;\n  createTransaction(userId: string, transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<Transaction>): Promise<Transaction | undefined>;\n\n  // Notifications\n  getNotifications(userId: string, isRead?: boolean): Promise<Notification[]>;\n  createNotification(userId: string, notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<boolean>;\n  markAllNotificationsAsRead(userId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private categories: Map<string, Category> = new Map();\n  private bills: Map<string, Bill> = new Map();\n  private incomes: Map<string, Income> = new Map();\n  private transactions: Map<string, Transaction> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default user\n    const defaultUser: User = {\n      id: \"default-user-id\",\n      username: \"daniel\",\n      password: \"password123\",\n      email: \"daniel@email.com\",\n      name: \"Daniel\"\n    };\n    this.users.set(defaultUser.id, defaultUser);\n\n    // Create default categories\n    const defaultCategories: Category[] = [\n      { id: \"cat-1\", name: \"Casa e Utilidades\", color: \"#3B82F6\", icon: \"fas fa-home\" },\n      { id: \"cat-2\", name: \"Alimentação\", color: \"#10B981\", icon: \"fas fa-utensils\" },\n      { id: \"cat-3\", name: \"Transporte\", color: \"#F59E0B\", icon: \"fas fa-car\" },\n      { id: \"cat-4\", name: \"Lazer\", color: \"#EF4444\", icon: \"fas fa-gamepad\" },\n      { id: \"cat-5\", name: \"Saúde\", color: \"#8B5CF6\", icon: \"fas fa-heartbeat\" },\n    ];\n    defaultCategories.forEach(cat => this.categories.set(cat.id, cat));\n\n    // Create default bills\n    const defaultBills: Bill[] = [\n      {\n        id: \"bill-1\",\n        userId: defaultUser.id,\n        categoryId: \"cat-1\",\n        name: \"Aluguel\",\n        description: \"Apartamento\",\n        amount: \"1800.00\",\n        dueDay: 10,\n        isPaid: false,\n        isRecurring: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"bill-2\", \n        userId: defaultUser.id,\n        categoryId: \"cat-1\",\n        name: \"Energia Elétrica\",\n        description: \"CPFL\",\n        amount: \"180.00\",\n        dueDay: 15,\n        isPaid: false,\n        isRecurring: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"bill-3\",\n        userId: defaultUser.id,\n        categoryId: \"cat-1\", \n        name: \"Água\",\n        description: \"SABESP\",\n        amount: \"85.50\",\n        dueDay: 20,\n        isPaid: false,\n        isRecurring: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    defaultBills.forEach(bill => this.bills.set(bill.id, bill));\n\n    // Create default incomes\n    const defaultIncomes: Income[] = [\n      {\n        id: \"income-1\",\n        userId: defaultUser.id,\n        source: \"Daniel\",\n        description: \"Quinzena\",\n        amount: \"2000.00\",\n        receiptDay: 15,\n        isRecurring: true,\n        date: null,\n        createdAt: new Date()\n      },\n      {\n        id: \"income-2\",\n        userId: defaultUser.id,\n        source: \"Daniel\", \n        description: \"Salário\",\n        amount: \"3500.00\",\n        receiptDay: 30,\n        isRecurring: true,\n        date: null,\n        createdAt: new Date()\n      },\n      {\n        id: \"income-3\",\n        userId: defaultUser.id,\n        source: \"Maria\",\n        description: \"Salário\",\n        amount: \"2800.00\",\n        receiptDay: 5,\n        isRecurring: true,\n        date: null,\n        createdAt: new Date()\n      }\n    ];\n    defaultIncomes.forEach(income => this.incomes.set(income.id, income));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email ?? null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCategories(userId: string): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const newCategory: Category = { \n      ...category, \n      id,\n      color: category.color ?? \"#3B82F6\",\n      icon: category.icon ?? \"fas fa-tag\"\n    };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async getBills(userId: string): Promise<Bill[]> {\n    return Array.from(this.bills.values()).filter(bill => bill.userId === userId);\n  }\n\n  async getBill(id: string): Promise<Bill | undefined> {\n    return this.bills.get(id);\n  }\n\n  async createBill(userId: string, bill: InsertBill): Promise<Bill> {\n    const id = randomUUID();\n    const newBill: Bill = {\n      ...bill,\n      id,\n      userId,\n      description: bill.description ?? null,\n      categoryId: bill.categoryId ?? null,\n      isRecurring: bill.isRecurring ?? true,\n      isPaid: false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.bills.set(id, newBill);\n    return newBill;\n  }\n\n  async updateBill(id: string, bill: Partial<Bill>): Promise<Bill | undefined> {\n    const existing = this.bills.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Bill = { ...existing, ...bill, updatedAt: new Date() };\n    this.bills.set(id, updated);\n    return updated;\n  }\n\n  async deleteBill(id: string): Promise<boolean> {\n    return this.bills.delete(id);\n  }\n\n  async getIncomes(userId: string): Promise<Income[]> {\n    return Array.from(this.incomes.values()).filter(income => income.userId === userId);\n  }\n\n  async getIncome(id: string): Promise<Income | undefined> {\n    return this.incomes.get(id);\n  }\n\n  async createIncome(userId: string, income: InsertIncome): Promise<Income> {\n    const id = randomUUID();\n    const newIncome: Income = {\n      ...income,\n      id,\n      userId,\n      date: income.date ?? null,\n      receiptDay: income.receiptDay ?? null,\n      isRecurring: income.isRecurring ?? true,\n      createdAt: new Date()\n    };\n    this.incomes.set(id, newIncome);\n    return newIncome;\n  }\n\n  async updateIncome(id: string, income: Partial<Income>): Promise<Income | undefined> {\n    const existing = this.incomes.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Income = { ...existing, ...income };\n    this.incomes.set(id, updated);\n    return updated;\n  }\n\n  async deleteIncome(id: string): Promise<boolean> {\n    return this.incomes.delete(id);\n  }\n\n  async getTransactions(userId: string, month?: number, year?: number): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(transaction => {\n      let matches = transaction.userId === userId;\n      if (month !== undefined) matches = matches && transaction.month === month;\n      if (year !== undefined) matches = matches && transaction.year === year;\n      return matches;\n    });\n  }\n\n  async createTransaction(userId: string, transaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const newTransaction: Transaction = {\n      ...transaction,\n      id,\n      userId,\n      isPaid: transaction.isPaid ?? false,\n      billId: transaction.billId ?? null,\n      incomeId: transaction.incomeId ?? null,\n      createdAt: new Date()\n    };\n    this.transactions.set(id, newTransaction);\n    return newTransaction;\n  }\n\n  async updateTransaction(id: string, transaction: Partial<Transaction>): Promise<Transaction | undefined> {\n    const existing = this.transactions.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Transaction = { ...existing, ...transaction };\n    this.transactions.set(id, updated);\n    return updated;\n  }\n\n  async getNotifications(userId: string, isRead?: boolean): Promise<Notification[]> {\n    return Array.from(this.notifications.values()).filter(notification => {\n      let matches = notification.userId === userId;\n      if (isRead !== undefined) matches = matches && notification.isRead === isRead;\n      return matches;\n    }).sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async createNotification(userId: string, notification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const newNotification: Notification = {\n      ...notification,\n      id,\n      userId,\n      relatedId: notification.relatedId ?? null,\n      isRead: false,\n      createdAt: new Date()\n    };\n    this.notifications.set(id, newNotification);\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<boolean> {\n    const notification = this.notifications.get(id);\n    if (!notification) return false;\n    \n    notification.isRead = true;\n    this.notifications.set(id, notification);\n    return true;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<boolean> {\n    const userNotifications = Array.from(this.notifications.values())\n      .filter(n => n.userId === userId && !n.isRead);\n    \n    userNotifications.forEach(notification => {\n      notification.isRead = true;\n      this.notifications.set(notification.id, notification);\n    });\n    \n    return true;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11078},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, date, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  name: text(\"name\").notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull().default(\"#3B82F6\"),\n  icon: text(\"icon\").notNull().default(\"fas fa-tag\"),\n});\n\nexport const bills = pgTable(\"bills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  dueDay: integer(\"due_day\").notNull(), // Day of month (1-31)\n  isPaid: boolean(\"is_paid\").default(false),\n  isRecurring: boolean(\"is_recurring\").default(true),\n  // Campos para sistema de parcelas\n  isInstallment: boolean(\"is_installment\").default(false),\n  totalInstallments: integer(\"total_installments\"),\n  currentInstallment: integer(\"current_installment\"),\n  originalAmount: decimal(\"original_amount\", { precision: 10, scale: 2 }), // Valor total original\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const incomes = pgTable(\"incomes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  source: text(\"source\").notNull(), // \"Daniel\", \"Maria\", \"Extra\"\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  receiptDay: integer(\"receipt_day\"), // Day of month for recurring income\n  isRecurring: boolean(\"is_recurring\").default(true),\n  date: date(\"date\"), // For one-time incomes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  billId: varchar(\"bill_id\").references(() => bills.id),\n  incomeId: varchar(\"income_id\").references(() => incomes.id),\n  type: text(\"type\").notNull(), // \"expense\" or \"income\"\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  month: integer(\"month\").notNull(),\n  year: integer(\"year\").notNull(),\n  isPaid: boolean(\"is_paid\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // \"warning\", \"info\", \"success\", \"error\"\n  isRead: boolean(\"is_read\").default(false),\n  relatedId: varchar(\"related_id\"), // Reference to bill/income/transaction\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  name: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).pick({\n  name: true,\n  color: true,\n  icon: true,\n});\n\nexport const insertBillSchema = createInsertSchema(bills).pick({\n  categoryId: true,\n  name: true,\n  description: true,\n  amount: true,\n  dueDay: true,\n  isRecurring: true,\n  isInstallment: true,\n  totalInstallments: true,\n  currentInstallment: true,\n  originalAmount: true,\n});\n\nexport const insertIncomeSchema = createInsertSchema(incomes).pick({\n  source: true,\n  description: true,\n  amount: true,\n  receiptDay: true,\n  isRecurring: true,\n  date: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).pick({\n  billId: true,\n  incomeId: true,\n  type: true,\n  amount: true,\n  date: true,\n  month: true,\n  year: true,\n  isPaid: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).pick({\n  title: true,\n  message: true,\n  type: true,\n  relatedId: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type Bill = typeof bills.$inferSelect;\n\nexport type InsertIncome = z.infer<typeof insertIncomeSchema>;\nexport type Income = typeof incomes.$inferSelect;\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":5242},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport MainLayout from \"@/components/layout/MainLayout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ContasPage from \"@/pages/contas\";\nimport RelatoriosPage from \"@/pages/relatorios\";\nimport CalendarioPage from \"@/pages/calendario\";\nimport NotificacoesPage from \"@/pages/notificacoes\";\nimport PerfilPage from \"@/pages/perfil\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/contas\" component={ContasPage} />\n        <Route path=\"/relatorios\" component={RelatoriosPage} />\n        <Route path=\"/calendario\" component={CalendarioPage} />\n        <Route path=\"/notificacoes\" component={NotificacoesPage} />\n        <Route path=\"/perfil\" component={PerfilPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </MainLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1413},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(215, 25%, 27%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(215, 25%, 27%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 25%, 27%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(207, 73%, 57%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(210, 40%, 8%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --border: hsl(215, 27.9%, 16.9%);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(215, 20.2%, 65.1%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(207, 73%, 57%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(210, 40%, 8%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom success, warning colors for financial app */\n.text-success {\n  color: var(--success);\n}\n\n.bg-success {\n  background-color: var(--success);\n}\n\n.text-warning {\n  color: var(--warning);\n}\n\n.bg-warning {\n  background-color: var(--warning);\n}\n\n.border-success {\n  border-color: var(--success);\n}\n\n.border-warning {\n  border-color: var(--warning);\n}\n\n/* Gradient backgrounds for cards */\n.bg-gradient-success {\n  background: linear-gradient(135deg, var(--success) 0%, hsl(142, 71%, 40%) 100%);\n}\n\n.bg-gradient-warning {\n  background: linear-gradient(135deg, var(--warning) 0%, hsl(38, 92%, 45%) 100%);\n}\n\n.bg-gradient-primary {\n  background: linear-gradient(135deg, var(--primary) 0%, hsl(158, 64%, 47%) 100%);\n}\n\n/* Mobile navigation fix */\n@media (max-width: 768px) {\n  .pb-safe {\n    padding-bottom: calc(env(safe-area-inset-bottom) + 4rem);\n  }\n}\n","size_bytes":4842},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiAssistant.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"default_key\" });\n\nexport interface FinancialData {\n  monthlyIncome: number;\n  monthlyExpenses: number;\n  bills: Array<{\n    name: string;\n    amount: number;\n    category: string;\n    dueDay: number;\n  }>;\n  categories: Array<{\n    name: string;\n    totalAmount: number;\n    percentage: number;\n  }>;\n}\n\nexport interface AIAdvice {\n  suggestion: string;\n  potentialSavings: number;\n  priority: \"high\" | \"medium\" | \"low\";\n  category: string;\n  actionItems: string[];\n}\n\nexport async function getAIFinancialAdvice(data: FinancialData): Promise<AIAdvice[]> {\n  try {\n    const prompt = `\nAnalise os dados financeiros abaixo e forneça 3 sugestões personalizadas de economia em português brasileiro.\nPara cada sugestão, inclua uma estimativa realista de economia mensal.\n\nDados financeiros:\n- Renda mensal: R$ ${data.monthlyIncome.toLocaleString('pt-BR')}\n- Gastos mensais: R$ ${data.monthlyExpenses.toLocaleString('pt-BR')}\n- Contas: ${data.bills.map(b => `${b.name}: R$ ${b.amount}`).join(', ')}\n- Categorias de gasto: ${data.categories.map(c => `${c.name}: R$ ${c.totalAmount} (${c.percentage}%)`).join(', ')}\n\nResponda no formato JSON com o seguinte schema:\n{\n  \"suggestions\": [\n    {\n      \"suggestion\": \"Descrição da sugestão\",\n      \"potentialSavings\": número_da_economia_estimada,\n      \"priority\": \"high|medium|low\",\n      \"category\": \"categoria_afetada\",\n      \"actionItems\": [\"ação 1\", \"ação 2\", \"ação 3\"]\n    }\n  ]\n}\n\nFoque em sugestões práticas e realizáveis para uma família brasileira.\n`;\n\n    const systemPrompt = \"Você é um consultor financeiro especializado em economia doméstica para famílias brasileiras. Forneça conselhos práticos e realistas. Responda sempre em JSON válido com 3 sugestões.\";\n    \n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            suggestions: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  suggestion: { type: \"string\" },\n                  potentialSavings: { type: \"number\" },\n                  priority: { type: \"string\", enum: [\"high\", \"medium\", \"low\"] },\n                  category: { type: \"string\" },\n                  actionItems: {\n                    type: \"array\",\n                    items: { type: \"string\" }\n                  }\n                },\n                required: [\"suggestion\", \"potentialSavings\", \"priority\", \"category\", \"actionItems\"]\n              }\n            }\n          },\n          required: [\"suggestions\"]\n        }\n      },\n      contents: prompt\n    });\n\n    const result = JSON.parse(response.text || \"{}\");\n    return result.suggestions || [];\n\n  } catch (error) {\n    console.error(\"Error getting AI financial advice:\", error);\n    return [\n      {\n        suggestion: \"Revise suas assinaturas e cancele serviços não utilizados\",\n        potentialSavings: 150,\n        priority: \"high\",\n        category: \"Lazer\",\n        actionItems: [\n          \"Listar todas as assinaturas ativas\",\n          \"Cancelar serviços não utilizados há mais de 30 dias\",\n          \"Negociar descontos em serviços essenciais\"\n        ]\n      }\n    ];\n  }\n}\n\nexport async function analyzeBillPatterns(data: FinancialData): Promise<string> {\n  try {\n    const prompt = `\nAnalise os padrões de gastos familiares e identifique tendências ou anomalias.\n\nDados: ${JSON.stringify(data)}\n\nResponda em português brasileiro com insights sobre:\n1. Padrões de consumo\n2. Possíveis anomalias\n3. Tendências sazonais\n4. Recomendações preventivas\n\nMantenha a resposta concisa (máximo 200 caracteres).\n`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt\n    });\n\n    return response.text || \"Análise indisponível no momento.\";\n\n  } catch (error) {\n    console.error(\"Error analyzing bill patterns:\", error);\n    return \"Seus gastos estão dentro da média familiar. Continue monitorando para identificar oportunidades de economia.\";\n  }\n}\n","size_bytes":4618},"server/services/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set - email notifications will be disabled\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.log(\"Email would be sent:\", params.subject);\n    return true; // Return true for development\n  }\n\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text || \"\",\n      html: params.html || params.text || \"\",\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport async function sendBillReminderEmail(\n  userEmail: string,\n  userName: string,\n  billName: string,\n  amount: string,\n  dueDate: string\n): Promise<boolean> {\n  const subject = `🔔 Lembrete: ${billName} vence em breve`;\n  \n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #3B82F6;\">FinanFamily - Lembrete de Vencimento</h2>\n      \n      <p>Olá, ${userName}!</p>\n      \n      <p>Este é um lembrete de que a conta <strong>${billName}</strong> está próxima do vencimento.</p>\n      \n      <div style=\"background-color: #FEF3C7; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"margin: 0; color: #92400E;\">Detalhes da Conta</h3>\n        <p style=\"margin: 10px 0;\"><strong>Conta:</strong> ${billName}</p>\n        <p style=\"margin: 10px 0;\"><strong>Valor:</strong> R$ ${amount}</p>\n        <p style=\"margin: 10px 0;\"><strong>Vencimento:</strong> ${dueDate}</p>\n      </div>\n      \n      <p>Não esqueça de efetuar o pagamento para evitar juros e multas.</p>\n      \n      <p style=\"color: #6B7280; font-size: 14px;\">\n        Este é um e-mail automático do sistema FinanFamily.\n      </p>\n    </div>\n  `;\n\n  const text = `\nFinanFamily - Lembrete de Vencimento\n\nOlá, ${userName}!\n\nA conta ${billName} no valor de R$ ${amount} vence em ${dueDate}.\n\nNão esqueça de efetuar o pagamento para evitar juros e multas.\n  `;\n\n  return sendEmail({\n    to: userEmail,\n    from: \"noreply@finanfamily.com\",\n    subject,\n    html,\n    text\n  });\n}\n\nexport async function sendOverdueNotificationEmail(\n  userEmail: string,\n  userName: string,\n  billName: string,\n  amount: string,\n  daysOverdue: number\n): Promise<boolean> {\n  const subject = `🚨 URGENTE: ${billName} está em atraso`;\n  \n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #EF4444;\">FinanFamily - Conta em Atraso</h2>\n      \n      <p>Olá, ${userName}!</p>\n      \n      <p>A conta <strong>${billName}</strong> está em atraso há ${daysOverdue} dia(s).</p>\n      \n      <div style=\"background-color: #FEE2E2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #EF4444;\">\n        <h3 style=\"margin: 0; color: #B91C1C;\">Atenção - Conta em Atraso</h3>\n        <p style=\"margin: 10px 0;\"><strong>Conta:</strong> ${billName}</p>\n        <p style=\"margin: 10px 0;\"><strong>Valor:</strong> R$ ${amount}</p>\n        <p style=\"margin: 10px 0;\"><strong>Atraso:</strong> ${daysOverdue} dia(s)</p>\n      </div>\n      \n      <p>Recomendamos efetuar o pagamento o quanto antes para evitar prejuízos ao seu CPF.</p>\n      \n      <p style=\"color: #6B7280; font-size: 14px;\">\n        Este é um e-mail automático do sistema FinanFamily.\n      </p>\n    </div>\n  `;\n\n  return sendEmail({\n    to: userEmail,\n    from: \"noreply@finanfamily.com\",\n    subject,\n    html,\n    text: `A conta ${billName} (R$ ${amount}) está em atraso há ${daysOverdue} dia(s). Efetue o pagamento o quanto antes.`\n  });\n}\n","size_bytes":4011},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendario.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  amount: number;\n  type: 'bill' | 'income';\n  dueDate: Date;\n  category?: any;\n  isPaid?: boolean;\n}\n\nexport default function CalendarioPage() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'month' | 'week' | 'agenda'>('month');\n  \n  const userId = \"default-user-id\";\n\n  const { data: bills = [] } = useQuery({\n    queryKey: [\"/api/bills\", userId],\n  });\n\n  const { data: incomes = [] } = useQuery({\n    queryKey: [\"/api/incomes\", userId],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", userId],\n  });\n\n  // Gerar eventos do calendário\n  const generateCalendarEvents = (): CalendarEvent[] => {\n    const events: CalendarEvent[] = [];\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // Adicionar contas\n    bills.forEach((bill: any) => {\n      const dueDate = new Date(currentYear, currentMonth, bill.dueDay);\n      if (bill.dueDay <= new Date(currentYear, currentMonth + 1, 0).getDate()) {\n        events.push({\n          id: bill.id,\n          title: bill.name,\n          amount: parseFloat(bill.amount),\n          type: 'bill',\n          dueDate,\n          category: categories.find((cat: any) => cat.id === bill.categoryId),\n          isPaid: bill.isPaid\n        });\n      }\n    });\n\n    // Adicionar receitas\n    incomes.forEach((income: any) => {\n      if (income.receiptDay) {\n        const receiptDate = new Date(currentYear, currentMonth, income.receiptDay);\n        if (income.receiptDay <= new Date(currentYear, currentMonth + 1, 0).getDate()) {\n          events.push({\n            id: income.id,\n            title: income.description,\n            amount: parseFloat(income.amount),\n            type: 'income',\n            dueDate: receiptDate\n          });\n        }\n      }\n    });\n\n    return events.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n  };\n\n  const calendarEvents = generateCalendarEvents();\n\n  // Filtrar eventos por data\n  const getEventsForDate = (date: Date) => {\n    return calendarEvents.filter(event => \n      event.dueDate.toDateString() === date.toDateString()\n    );\n  };\n\n  // Verificar se uma data tem eventos\n  const hasEvents = (date: Date) => {\n    return getEventsForDate(date).length > 0;\n  };\n\n  // Próximos vencimentos (próximos 7 dias)\n  const getUpcomingEvents = () => {\n    const today = new Date();\n    const weekFromNow = new Date();\n    weekFromNow.setDate(today.getDate() + 7);\n    \n    return calendarEvents.filter(event => \n      event.dueDate >= today && event.dueDate <= weekFromNow\n    );\n  };\n\n  const handleEventClick = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setIsModalOpen(true);\n  };\n\n  const EventCard = ({ event }: { event: CalendarEvent }) => (\n    <div \n      className={`p-3 rounded-lg border cursor-pointer transition-all hover:shadow-md ${\n        event.type === 'bill' \n          ? (event.isPaid ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200')\n          : 'bg-blue-50 border-blue-200'\n      }`}\n      onClick={() => handleEventClick(event)}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full ${\n            event.type === 'bill' \n              ? (event.isPaid ? 'bg-green-500' : 'bg-red-500')\n              : 'bg-blue-500'\n          }`}></div>\n          <span className=\"font-medium text-sm\">{event.title}</span>\n        </div>\n        <div className=\"text-right\">\n          <div className={`font-bold text-sm ${\n            event.type === 'bill' ? 'text-red-600' : 'text-blue-600'\n          }`}>\n            R$ {event.amount.toFixed(2)}\n          </div>\n          {event.isPaid && (\n            <Badge variant=\"outline\" className=\"text-xs\">Pago</Badge>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">Calendário Financeiro</h1>\n              <p className=\"text-muted-foreground\">\n                Visualize seus vencimentos e recebimentos em formato de calendário\n              </p>\n            </div>\n            \n            <Tabs value={viewMode} onValueChange={(value: any) => setViewMode(value)}>\n              <TabsList>\n                <TabsTrigger value=\"month\">Mês</TabsTrigger>\n                <TabsTrigger value=\"week\">Semana</TabsTrigger>\n                <TabsTrigger value=\"agenda\">Agenda</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Calendário Principal */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {new Date().toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}\n                </CardTitle>\n                <CardDescription>\n                  Clique em uma data para ver os eventos do dia\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={setSelectedDate}\n                  className=\"rounded-md border\"\n                  modifiers={{\n                    hasEvents: (date) => hasEvents(date),\n                    today: new Date(),\n                  }}\n                  modifiersStyles={{\n                    hasEvents: {\n                      backgroundColor: '#dbeafe',\n                      color: '#1e40af',\n                      fontWeight: 'bold'\n                    },\n                    today: {\n                      backgroundColor: '#3b82f6',\n                      color: 'white'\n                    }\n                  }}\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Painel Lateral */}\n          <div className=\"space-y-6\">\n            {/* Eventos do Dia Selecionado */}\n            {selectedDate && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">\n                    {selectedDate.toLocaleDateString('pt-BR', { \n                      weekday: 'long', \n                      day: 'numeric', \n                      month: 'long' \n                    })}\n                  </CardTitle>\n                  <CardDescription>\n                    {getEventsForDate(selectedDate).length} evento(s)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {getEventsForDate(selectedDate).map((event) => (\n                      <EventCard key={event.id} event={event} />\n                    ))}\n                    \n                    {getEventsForDate(selectedDate).length === 0 && (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        <i className=\"fas fa-calendar-times text-2xl mb-2\"></i>\n                        <p className=\"text-sm\">Nenhum evento nesta data</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Próximos Vencimentos */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Próximos 7 Dias</CardTitle>\n                <CardDescription>\n                  Vencimentos e recebimentos próximos\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {getUpcomingEvents().map((event) => (\n                    <div key={event.id} className=\"flex items-center justify-between p-2 rounded border-l-4\"\n                         style={{ borderLeftColor: event.type === 'bill' ? '#EF4444' : '#3B82F6' }}>\n                      <div>\n                        <div className=\"font-medium text-sm\">{event.title}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {event.dueDate.toLocaleDateString('pt-BR', { day: 'numeric', month: 'short' })}\n                        </div>\n                      </div>\n                      <div className={`font-bold text-sm ${\n                        event.type === 'bill' ? 'text-red-600' : 'text-blue-600'\n                      }`}>\n                        R$ {event.amount.toFixed(2)}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {getUpcomingEvents().length === 0 && (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      <i className=\"fas fa-check-circle text-2xl mb-2 text-green-500\"></i>\n                      <p className=\"text-sm\">Nenhum vencimento próximo</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Resumo do Mês */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Resumo Mensal</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Total a Receber</span>\n                    <span className=\"font-bold text-blue-600\">\n                      R$ {calendarEvents\n                        .filter(e => e.type === 'income')\n                        .reduce((sum, e) => sum + e.amount, 0)\n                        .toFixed(2)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Total a Pagar</span>\n                    <span className=\"font-bold text-red-600\">\n                      R$ {calendarEvents\n                        .filter(e => e.type === 'bill')\n                        .reduce((sum, e) => sum + e.amount, 0)\n                        .toFixed(2)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Contas Pagas</span>\n                    <Badge variant=\"outline\">\n                      {calendarEvents.filter(e => e.type === 'bill' && e.isPaid).length} / {calendarEvents.filter(e => e.type === 'bill').length}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Modal de Detalhes do Evento */}\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>{selectedEvent?.title}</DialogTitle>\n              <DialogDescription>\n                {selectedEvent?.type === 'bill' ? 'Conta a pagar' : 'Receita'}\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedEvent && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Valor:</span>\n                  <span className={`font-bold text-lg ${\n                    selectedEvent.type === 'bill' ? 'text-red-600' : 'text-blue-600'\n                  }`}>\n                    R$ {selectedEvent.amount.toFixed(2)}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span>Data:</span>\n                  <span>{selectedEvent.dueDate.toLocaleDateString('pt-BR')}</span>\n                </div>\n                \n                {selectedEvent.category && (\n                  <div className=\"flex items-center justify-between\">\n                    <span>Categoria:</span>\n                    <Badge style={{ backgroundColor: selectedEvent.category.color }}>\n                      {selectedEvent.category.name}\n                    </Badge>\n                  </div>\n                )}\n                \n                {selectedEvent.type === 'bill' && (\n                  <div className=\"flex items-center justify-between\">\n                    <span>Status:</span>\n                    <Badge variant={selectedEvent.isPaid ? \"default\" : \"secondary\"}>\n                      {selectedEvent.isPaid ? 'Pago' : 'Pendente'}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":13767},"client/src/pages/contas.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Plus, Grid3X3, List, Edit, Calendar, CreditCard, Clock, CheckCircle, AlertCircle } from \"lucide-react\";\nimport AddBillModal from \"@/components/modals/AddBillModal\";\n\nexport default function ContasPage() {\n  const [selectedBill, setSelectedBill] = useState<any>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editedAmount, setEditedAmount] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"cards\" | \"list\">(\"cards\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const userId = \"default-user-id\"; // Em produção, vem do sistema de autenticação\n\n  const { data: bills = [] } = useQuery({\n    queryKey: [\"/api/bills\", userId],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", userId],\n  });\n\n  const updateBillMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/bills/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Erro ao atualizar conta\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\", userId] });\n      setIsEditModalOpen(false);\n      toast({\n        title: \"Conta atualizada\",\n        description: \"A conta foi atualizada com sucesso!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar a conta. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filtrar contas pelo termo de pesquisa\n  const filteredBills = Array.isArray(bills) ? bills.filter((bill: any) => \n    bill.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    bill.description.toLowerCase().includes(searchTerm.toLowerCase())\n  ) : [];\n\n  // Adicionar informações de tipo para todas as contas\n  const allBillsWithType = filteredBills.map((bill: any) => ({\n    ...bill,\n    billType: bill.isRecurring && !bill.installments \n      ? 'fixa' \n      : bill.installments \n        ? 'parcelada' \n        : 'avulsa'\n  }));\n  \n  const getBillTypeInfo = (type: string) => {\n    switch(type) {\n      case 'fixa':\n        return { label: 'Fixa', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400', icon: CreditCard };\n      case 'parcelada':\n        return { label: 'Parcelada', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400', icon: Clock };\n      case 'avulsa':\n        return { label: 'Avulsa', color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400', icon: CheckCircle };\n      default:\n        return { label: 'Única', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400', icon: AlertCircle };\n    }\n  };\n\n  // Para compatibilidade com código antigo (remover depois)\n  const contasFixas = filteredBills.filter((bill: any) => bill.isRecurring && !bill.installments);\n  const contasParceladas = filteredBills.filter((bill: any) => bill.installments);\n  const contasAvulsas = filteredBills.filter((bill: any) => !bill.isRecurring && !bill.installments);\n\n  const getCategoryInfo = (categoryId: string) => {\n    return Array.isArray(categories) ? categories.find((cat: any) => cat.id === categoryId) || { name: \"Outros\", color: \"#6B7280\", icon: \"fas fa-tag\" } : { name: \"Outros\", color: \"#6B7280\", icon: \"fas fa-tag\" };\n  };\n\n  const handleEditAmount = (bill: any) => {\n    setSelectedBill(bill);\n    setEditedAmount(bill.amount);\n    setIsEditModalOpen(true);\n  };\n\n  const handleSaveAmount = () => {\n    if (selectedBill && editedAmount) {\n      updateBillMutation.mutate({\n        id: selectedBill.id,\n        data: { amount: editedAmount }\n      });\n    }\n  };\n\n  const BillCard = ({ bill }: { bill: any }) => {\n    const category = getCategoryInfo(bill.categoryId);\n    const typeInfo = getBillTypeInfo(bill.billType);\n    const TypeIcon = typeInfo.icon;\n    \n    if (viewMode === \"list\") {\n      return (\n        <div className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors\" data-testid={`bill-${bill.id}`}>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center\" style={{ backgroundColor: category.color }}>\n              <i className={`${category.icon} text-white text-xs`}></i>\n            </div>\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"font-semibold\">{bill.name}</div>\n                <Badge className={`${typeInfo.color} text-xs font-medium`}>\n                  {typeInfo.label}\n                  {bill.billType === 'parcelada' && bill.installments && (\n                    <span className=\"ml-1\">({bill.currentInstallment}/{bill.totalInstallments})</span>\n                  )}\n                </Badge>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{bill.description}</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Badge variant={category.name === \"Casa e Utilidades\" ? \"default\" : \"secondary\"}>\n              {category.name}\n            </Badge>\n            <div className=\"text-right\">\n              <div className=\"font-bold\">R$ {parseFloat(bill.amount).toFixed(2)}</div>\n              <div className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                <Calendar size={12} /> Dia {bill.dueDay}\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleEditAmount(bill)}\n                data-testid={`edit-${bill.id}`}\n              >\n                <Edit size={14} />\n              </Button>\n              <Switch\n                checked={bill.isPaid}\n                onCheckedChange={(checked) => {\n                  updateBillMutation.mutate({\n                    id: bill.id,\n                    data: { isPaid: checked }\n                  });\n                }}\n                data-testid={`toggle-${bill.id}`}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n    \n    return (\n      <Card className=\"hover:shadow-md transition-shadow\" data-testid={`bill-card-${bill.id}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <div className=\"w-12 h-12 rounded-xl flex items-center justify-center shadow-lg\" style={{ backgroundColor: category.color }}>\n                  <i className={`${category.icon} text-white text-lg`}></i>\n                </div>\n                <div className=\"absolute -bottom-1 -right-1\">\n                  <TypeIcon className=\"w-6 h-6 p-1 bg-white dark:bg-gray-900 rounded-full border-2 border-white dark:border-gray-900 text-gray-600 dark:text-gray-400\" />\n                </div>\n              </div>\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <CardTitle className=\"text-xl font-bold\">{bill.name}</CardTitle>\n                  <Badge className={`${typeInfo.color} text-xs font-medium`}>\n                    {typeInfo.label}\n                    {bill.billType === 'parcelada' && bill.installments && (\n                      <span className=\"ml-1\">({bill.currentInstallment}/{bill.totalInstallments})</span>\n                    )}\n                  </Badge>\n                  {bill.isPaid && (\n                    <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n                      Pago\n                    </Badge>\n                  )}\n                </div>\n                <CardDescription>{bill.description}</CardDescription>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-foreground\">\n                R$ {parseFloat(bill.amount).toFixed(2)}\n              </div>\n              {bill.installments && (\n                <div className=\"text-sm text-muted-foreground\">\n                  {bill.currentInstallment}/{bill.totalInstallments} parcelas\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Badge variant={category.name === \"Casa e Utilidades\" ? \"default\" : \"secondary\"}>\n                {category.name}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                <Calendar size={12} /> Vence dia {bill.dueDay}\n              </span>\n              {bill.isRecurring && (\n                <Badge variant=\"outline\">Fixa</Badge>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEditAmount(bill)}\n                data-testid={`edit-${bill.id}`}\n              >\n                <Edit size={14} className=\"mr-2\" />\n                Ajustar\n              </Button>\n              \n              <Switch\n                checked={bill.isPaid}\n                onCheckedChange={(checked) => {\n                  updateBillMutation.mutate({\n                    id: bill.id,\n                    data: { isPaid: checked }\n                  });\n                }}\n                data-testid={`toggle-${bill.id}`}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">Gerenciar Contas</h1>\n              <p className=\"text-muted-foreground\">\n                Organize suas contas fixas, parceladas e avulsas em um só lugar\n              </p>\n            </div>\n            <Button onClick={() => setIsAddModalOpen(true)} className=\"flex items-center gap-2\" data-testid=\"add-bill-button\">\n              <Plus size={16} />\n              Nova Conta\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n              <Input\n                placeholder=\"Pesquisar contas...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-bills\"\n              />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={viewMode === \"cards\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"cards\")}\n                data-testid=\"view-cards\"\n              >\n                <Grid3X3 size={16} />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                data-testid=\"view-list\"\n              >\n                <List size={16} />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-900 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden\">\n          <div className=\"bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">Todas as Contas</h2>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {allBillsWithType.length} contas encontradas\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\">\n                  {allBillsWithType.filter(b => b.billType === 'fixa').length} Fixas\n                </Badge>\n                <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\">\n                  {allBillsWithType.filter(b => b.billType === 'parcelada').length} Parceladas\n                </Badge>\n                <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n                  {allBillsWithType.filter(b => b.billType === 'avulsa').length} Avulsas\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"p-6\">\n            <div className={viewMode === \"cards\" ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" : \"space-y-3\"}>\n              {allBillsWithType.map((bill: any) => (\n                <BillCard key={bill.id} bill={bill} />\n              ))}\n              \n              {allBillsWithType.length === 0 && (\n                <div className=\"col-span-full text-center py-12 text-muted-foreground\">\n                  <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center\">\n                    <i className=\"fas fa-receipt text-3xl text-gray-400\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                    Nenhuma conta encontrada\n                  </h3>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\n                    Comece criando sua primeira conta para organizar suas finanças.\n                  </p>\n                  <Button onClick={() => setIsAddModalOpen(true)} className=\"flex items-center gap-2\">\n                    <Plus size={16} />\n                    Adicionar Primeira Conta\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Modal de Edição de Valor */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Ajustar Valor da Conta</DialogTitle>\n              <DialogDescription>\n                Altere o valor desta conta quando houver reajustes, juros ou mudanças no valor.\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"amount\">Novo Valor</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editedAmount}\n                  onChange={(e) => setEditedAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsEditModalOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleSaveAmount} disabled={updateBillMutation.isPending}>\n                {updateBillMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n        \n        {/* Modal para Adicionar Nova Conta */}\n        <AddBillModal \n          isOpen={isAddModalOpen} \n          onClose={() => setIsAddModalOpen(false)}\n          categories={Array.isArray(categories) ? categories : []}\n          userId={userId}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":17271},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Bill, Income, Category, Notification } from \"@shared/schema\";\nimport FinancialSummaryCards from \"@/components/dashboard/FinancialSummaryCards\";\nimport ChartsSection from \"@/components/dashboard/ChartsSection\";\nimport BillsTable from \"@/components/dashboard/BillsTable\";\nimport IncomePanel from \"@/components/dashboard/IncomePanel\";\nimport CalendarView from \"@/components/dashboard/CalendarView\";\nimport NotificationsPanel from \"@/components/dashboard/NotificationsPanel\";\nimport AIAssistant from \"@/components/dashboard/AIAssistant\";\nimport AddBillModal from \"@/components/modals/AddBillModal\";\nimport AddIncomeModal from \"@/components/modals/AddIncomeModal\";\n\n// Interface para os dados do dashboard\ninterface DashboardData {\n  monthlyIncome: number;\n  monthlyExpenses: number;\n  monthlyBalance: number;\n  upcomingBills: number;\n  bills: Bill[];\n  incomes: Income[];\n  categories: Category[];\n  categoryBreakdown: Array<{\n    id: string;\n    name: string;\n    color: string;\n    totalAmount: number;\n    percentage: number;\n  }>;\n}\n\nexport default function Dashboard() {\n  const [isAddBillModalOpen, setIsAddBillModalOpen] = useState(false);\n  const [isAddIncomeModalOpen, setIsAddIncomeModalOpen] = useState(false);\n  \n  const userId = \"default-user-id\"; // In real app, get from auth context\n\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\", userId],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: notifications } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\", userId],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Erro ao carregar dados</h2>\n          <p className=\"text-muted-foreground mt-2\">Tente recarregar a página</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-safe\">\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header with AI Assistant */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-2\">Olá, Daniel!</h2>\n              <p className=\"text-muted-foreground\">\n                Aqui está o resumo financeiro da sua família em {new Date().toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}\n              </p>\n            </div>\n            \n            <AIAssistant userId={userId} />\n          </div>\n        </div>\n\n        {/* Financial Summary Cards */}\n        <FinancialSummaryCards data={dashboardData} />\n\n        {/* Charts Section */}\n        <ChartsSection data={dashboardData} />\n\n        {/* Bills and Income Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <div className=\"lg:col-span-2\">\n            <BillsTable \n              bills={dashboardData.bills} \n              categories={dashboardData.categories}\n              onAddBill={() => setIsAddBillModalOpen(true)}\n            />\n          </div>\n          \n          <IncomePanel \n            incomes={dashboardData.incomes}\n            onAddIncome={() => setIsAddIncomeModalOpen(true)}\n          />\n        </div>\n\n        {/* Calendar and Notifications */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <CalendarView \n            bills={dashboardData.bills}\n            incomes={dashboardData.incomes}\n          />\n          \n          <div className=\"space-y-6\">\n            <NotificationsPanel \n              notifications={notifications || []}\n              userId={userId}\n            />\n          </div>\n        </div>\n      </main>\n\n      {/* Modals */}\n      <AddBillModal \n        isOpen={isAddBillModalOpen}\n        onClose={() => setIsAddBillModalOpen(false)}\n        categories={dashboardData.categories}\n        userId={userId}\n      />\n      \n      <AddIncomeModal \n        isOpen={isAddIncomeModalOpen}\n        onClose={() => setIsAddIncomeModalOpen(false)}\n        userId={userId}\n      />\n\n    </div>\n  );\n}\n","size_bytes":4774},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notificacoes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function NotificacoesPage() {\n  const [filter, setFilter] = useState<\"all\" | \"unread\" | \"read\">(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const userId = \"default-user-id\";\n\n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/notifications\", userId],\n    refetchInterval: 30000,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(\"Erro ao marcar notificação como lida\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n      toast({\n        title: \"Notificação marcada como lida\",\n        description: \"A notificação foi atualizada com sucesso!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar a notificação. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/notifications/${userId}/mark-all-read`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(\"Erro ao marcar todas as notificações como lidas\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n      toast({\n        title: \"Todas as notificações marcadas como lidas\",\n        description: \"Suas notificações foram atualizadas!\",\n      });\n    },\n  });\n\n  const filteredNotifications = notifications.filter((notification: any) => {\n    if (filter === \"unread\") return !notification.isRead;\n    if (filter === \"read\") return notification.isRead;\n    return true;\n  });\n\n  const unreadCount = notifications.filter((n: any) => !n.isRead).length;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"warning\": return \"fas fa-exclamation-triangle text-yellow-500\";\n      case \"error\": return \"fas fa-times-circle text-red-500\";\n      case \"success\": return \"fas fa-check-circle text-green-500\";\n      case \"info\": return \"fas fa-info-circle text-blue-500\";\n      default: return \"fas fa-bell text-gray-500\";\n    }\n  };\n\n  const getNotificationBorderColor = (type: string) => {\n    switch (type) {\n      case \"warning\": return \"border-l-yellow-500\";\n      case \"error\": return \"border-l-red-500\";\n      case \"success\": return \"border-l-green-500\";\n      case \"info\": return \"border-l-blue-500\";\n      default: return \"border-l-gray-500\";\n    }\n  };\n\n  const NotificationCard = ({ notification }: { notification: any }) => (\n    <Card className={`${!notification.isRead ? 'bg-blue-50 border-blue-200' : 'bg-background'} border-l-4 ${getNotificationBorderColor(notification.type)} hover:shadow-md transition-shadow`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-3 flex-1\">\n            <div className=\"mt-1\">\n              <i className={`${getNotificationIcon(notification.type)} text-lg`}></i>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <CardTitle className=\"text-base font-semibold\">\n                  {notification.title}\n                </CardTitle>\n                {!notification.isRead && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">Nova</Badge>\n                )}\n              </div>\n              <CardDescription className=\"text-sm text-muted-foreground\">\n                {notification.message}\n              </CardDescription>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                {new Date(notification.createdAt).toLocaleString('pt-BR')}\n              </div>\n            </div>\n          </div>\n          \n          {!notification.isRead && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => markAsReadMutation.mutate(notification.id)}\n              disabled={markAsReadMutation.isPending}\n            >\n              Marcar como lida\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">Notificações</h1>\n              <p className=\"text-muted-foreground\">\n                Acompanhe alertas importantes sobre suas finanças\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {unreadCount} não lida{unreadCount !== 1 ? 's' : ''}\n              </Badge>\n              \n              {unreadCount > 0 && (\n                <Button \n                  variant=\"outline\" \n                  onClick={() => markAllAsReadMutation.mutate()}\n                  disabled={markAllAsReadMutation.isPending}\n                >\n                  Marcar todas como lidas\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={filter} onValueChange={(value: any) => setFilter(value)} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"all\">\n              Todas ({notifications.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"unread\">\n              Não lidas ({unreadCount})\n            </TabsTrigger>\n            <TabsTrigger value=\"read\">\n              Lidas ({notifications.length - unreadCount})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value={filter} className=\"mt-6\">\n            <div className=\"space-y-4\">\n              {filteredNotifications.length > 0 ? (\n                filteredNotifications.map((notification: any) => (\n                  <NotificationCard key={notification.id} notification={notification} />\n                ))\n              ) : (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <div className=\"text-center text-muted-foreground\">\n                      <i className=\"fas fa-bell-slash text-4xl mb-4\"></i>\n                      <h3 className=\"text-lg font-medium mb-2\">\n                        {filter === \"unread\" \n                          ? \"Nenhuma notificação não lida\" \n                          : filter === \"read\" \n                          ? \"Nenhuma notificação lida\"\n                          : \"Nenhuma notificação encontrada\"\n                        }\n                      </h3>\n                      <p className=\"text-sm\">\n                        {filter === \"all\" \n                          ? \"Você está em dia! Não há notificações no momento.\"\n                          : filter === \"unread\"\n                          ? \"Todas as suas notificações foram lidas.\"\n                          : \"Você ainda não leu nenhuma notificação.\"\n                        }\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Estatísticas de notificações */}\n        {notifications.length > 0 && (\n          <div className=\"mt-8 grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total</CardTitle>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {notifications.length}\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-yellow-500\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Avisos</CardTitle>\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {notifications.filter((n: any) => n.type === 'warning').length}\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Sucessos</CardTitle>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {notifications.filter((n: any) => n.type === 'success').length}\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-red-500\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Críticos</CardTitle>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {notifications.filter((n: any) => n.type === 'error').length}\n                </div>\n              </CardHeader>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10103},"client/src/pages/relatorios.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { \n  ResponsiveContainer, \n  AreaChart, \n  Area, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  BarChart, \n  Bar, \n  PieChart, \n  Pie, \n  Cell,\n  LineChart,\n  Line\n} from \"recharts\";\n\nexport default function RelatoriosPage() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"mes-atual\");\n  const userId = \"default-user-id\";\n\n  const { data: dashboardData } = useQuery({\n    queryKey: [\"/api/dashboard\", userId],\n  });\n\n  const { data: bills = [] } = useQuery({\n    queryKey: [\"/api/bills\", userId],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", userId],\n  });\n\n  // Preparar dados para gráficos interativos\n  const categoryData = categories?.map((category: any) => {\n    const categoryBills = bills.filter((bill: any) => bill.categoryId === category.id);\n    const totalAmount = categoryBills.reduce((sum: number, bill: any) => sum + parseFloat(bill.amount), 0);\n    \n    return {\n      name: category.name,\n      value: totalAmount,\n      color: category.color,\n      icon: category.icon,\n      bills: categoryBills.length\n    };\n  }).filter((cat: any) => cat.value > 0) || [];\n\n  // Dados mensais simulados para gráfico de tendência\n  const monthlyData = [\n    { month: \"Jan\", receitas: 8300, despesas: 7200, economia: 1100 },\n    { month: \"Fev\", receitas: 8300, despesas: 6900, economia: 1400 },\n    { month: \"Mar\", receitas: 8500, despesas: 7100, economia: 1400 },\n    { month: \"Abr\", receitas: 8300, despesas: 7300, economia: 1000 },\n    { month: \"Mai\", receitas: 8300, despesas: 6800, economia: 1500 },\n    { month: \"Jun\", receitas: 8600, despesas: 7000, economia: 1600 },\n  ];\n\n  // Cores vibrantes para os gráficos\n  const CHART_COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#EC4899'];\n\n  const handleCategoryClick = (data: any) => {\n    console.log(\"Clicou na categoria:\", data);\n    // Aqui poderia navegar para detalhes da categoria ou mostrar modal\n  };\n\n  const handleBarClick = (data: any, index: number) => {\n    console.log(\"Clicou no período:\", data);\n    // Aqui poderia mostrar detalhes do mês específico\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">Relatórios Financeiros</h1>\n              <p className=\"text-muted-foreground\">\n                Análise detalhada das suas finanças com gráficos interativos\n              </p>\n            </div>\n            \n            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"mes-atual\">Mês Atual</SelectItem>\n                <SelectItem value=\"trimestre\">Últimos 3 meses</SelectItem>\n                <SelectItem value=\"semestre\">Últimos 6 meses</SelectItem>\n                <SelectItem value=\"ano\">Último ano</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"visao-geral\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"visao-geral\">Visão Geral</TabsTrigger>\n            <TabsTrigger value=\"categorias\">Por Categoria</TabsTrigger>\n            <TabsTrigger value=\"tendencias\">Tendências</TabsTrigger>\n            <TabsTrigger value=\"metas\">Metas</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"visao-geral\" className=\"space-y-6\">\n            {/* Cards de Resumo */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"border-l-4 border-l-blue-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Receita Total</CardTitle>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    R$ {dashboardData?.monthlyIncome?.toFixed(2) || \"0,00\"}\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-red-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Despesas Totais</CardTitle>\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    R$ {dashboardData?.monthlyExpenses?.toFixed(2) || \"0,00\"}\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-green-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Saldo</CardTitle>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    R$ {dashboardData?.monthlyBalance?.toFixed(2) || \"0,00\"}\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-orange-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Taxa de Economia</CardTitle>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {dashboardData?.monthlyIncome && dashboardData?.monthlyBalance \n                      ? ((dashboardData.monthlyBalance / dashboardData.monthlyIncome) * 100).toFixed(1)\n                      : \"0\"}%\n                  </div>\n                </CardHeader>\n              </Card>\n            </div>\n\n            {/* Gráfico de Receitas vs Despesas */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Evolução Mensal - Receitas vs Despesas</CardTitle>\n                <CardDescription>Clique nas barras para ver detalhes do período</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={monthlyData} onClick={handleBarClick}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number) => [`R$ ${value.toFixed(2)}`, \"\"]}\n                      labelStyle={{ color: '#374151' }}\n                      contentStyle={{ \n                        backgroundColor: '#f9fafb', \n                        border: '1px solid #e5e7eb',\n                        borderRadius: '6px'\n                      }}\n                    />\n                    <Bar dataKey=\"receitas\" fill=\"#10B981\" name=\"Receitas\" radius={[4, 4, 0, 0]} />\n                    <Bar dataKey=\"despesas\" fill=\"#EF4444\" name=\"Despesas\" radius={[4, 4, 0, 0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"categorias\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Gráfico de Pizza Interativo */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Distribuição por Categoria</CardTitle>\n                  <CardDescription>Clique nas fatias para ver detalhes</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={categoryData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={120}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                        onClick={handleCategoryClick}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        {categoryData.map((entry: any, index: number) => (\n                          <Cell \n                            key={`cell-${index}`} \n                            fill={entry.color}\n                            stroke=\"#fff\"\n                            strokeWidth={2}\n                          />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value: number) => [`R$ ${value.toFixed(2)}`, \"Valor\"]}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Lista de Categorias */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Ranking de Categorias</CardTitle>\n                  <CardDescription>Maiores gastos por categoria</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {categoryData\n                      .sort((a: any, b: any) => b.value - a.value)\n                      .map((category: any, index: number) => (\n                        <div key={category.name} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div \n                              className=\"w-10 h-10 rounded-lg flex items-center justify-center\"\n                              style={{ backgroundColor: category.color }}\n                            >\n                              <i className={`${category.icon} text-white text-sm`}></i>\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{category.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {category.bills} conta{category.bills > 1 ? 's' : ''}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold\">R$ {category.value.toFixed(2)}</div>\n                            <Badge variant=\"secondary\">\n                              #{index + 1}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"tendencias\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Tendência de Economia</CardTitle>\n                <CardDescription>Evolução do seu saldo mensal ao longo do tempo</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <AreaChart data={monthlyData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number) => [`R$ ${value.toFixed(2)}`, \"\"]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"economia\" \n                      stroke=\"#10B981\" \n                      fill=\"#10B981\" \n                      fillOpacity={0.3}\n                      strokeWidth={3}\n                      name=\"Economia\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Linha de Receitas e Despesas</CardTitle>\n                <CardDescription>Comparação detalhada mês a mês</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={monthlyData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number) => [`R$ ${value.toFixed(2)}`, \"\"]}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"receitas\" \n                      stroke=\"#10B981\" \n                      strokeWidth={3}\n                      dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}\n                      name=\"Receitas\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"despesas\" \n                      stroke=\"#EF4444\" \n                      strokeWidth={3}\n                      dot={{ fill: '#EF4444', strokeWidth: 2, r: 4 }}\n                      name=\"Despesas\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"metas\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Metas Financeiras</CardTitle>\n                <CardDescription>Acompanhe o progresso das suas metas de economia</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Meta de Economia */}\n                  <div className=\"p-4 rounded-lg border\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold\">Meta de Economia Mensal</h3>\n                      <Badge variant=\"outline\">R$ 1.500,00</Badge>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3 mb-2\">\n                      <div \n                        className=\"bg-green-600 h-3 rounded-full transition-all duration-300\" \n                        style={{ width: `${Math.min((dashboardData?.monthlyBalance || 0) / 1500 * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"flex justify-between text-sm text-muted-foreground\">\n                      <span>R$ {dashboardData?.monthlyBalance?.toFixed(2) || \"0,00\"} economizado</span>\n                      <span>{Math.min(((dashboardData?.monthlyBalance || 0) / 1500 * 100), 100).toFixed(1)}%</span>\n                    </div>\n                  </div>\n\n                  {/* Meta por Categoria */}\n                  <div className=\"p-4 rounded-lg border\">\n                    <h3 className=\"font-semibold mb-3\">Limite de Gastos por Categoria</h3>\n                    <div className=\"space-y-3\">\n                      {categoryData.slice(0, 3).map((category: any) => (\n                        <div key={category.name}>\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-sm font-medium\">{category.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">\n                              R$ {category.value.toFixed(2)} / R$ 2.000,00\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"h-2 rounded-full\" \n                              style={{ \n                                width: `${Math.min((category.value / 2000) * 100, 100)}%`,\n                                backgroundColor: category.value > 2000 ? '#EF4444' : category.color\n                              }}\n                            ></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16727},"client/src/components/dashboard/AIAssistant.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface AIAssistantProps {\n  userId: string;\n}\n\ninterface AIAdvice {\n  suggestion: string;\n  potentialSavings: number;\n  priority: \"high\" | \"medium\" | \"low\";\n  category: string;\n  actionItems: string[];\n}\n\nexport default function AIAssistant({ userId }: AIAssistantProps) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: aiAdvice, isLoading } = useQuery({\n    queryKey: [\"/api/ai-advice\", userId],\n    enabled: isModalOpen,\n  });\n\n  const { data: quickTip } = useQuery({\n    queryKey: [\"/api/ai-analysis\", userId],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(amount);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'text-destructive bg-destructive/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-success bg-success/10';\n      default:\n        return 'text-muted-foreground bg-muted/10';\n    }\n  };\n\n  return (\n    <>\n      {/* AI Assistant Card */}\n      <div className=\"mt-4 lg:mt-0 bg-gradient-to-r from-accent/10 to-accent/5 border border-accent/20 rounded-xl p-4 lg:w-80\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n            <i className=\"fas fa-robot text-accent-foreground\"></i>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h4 className=\"font-semibold text-foreground text-sm\">💡 Dica da IA</h4>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {quickTip?.analysis || \"Analisando seus gastos para oferecer dicas personalizadas...\"}\n            </p>\n            <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n              <DialogTrigger asChild>\n                <button \n                  className=\"text-accent hover:text-accent/80 text-xs font-medium mt-2\"\n                  data-testid=\"button-ai-details\"\n                >\n                  Ver detalhes\n                </button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-robot text-accent\"></i>\n                    <span>Assistente IA - Dicas de Economia</span>\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <div className=\"space-y-6\">\n                  {isLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"border rounded-lg p-4\">\n                          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                          <Skeleton className=\"h-3 w-1/2 mb-3\" />\n                          <div className=\"space-y-2\">\n                            <Skeleton className=\"h-3 w-full\" />\n                            <Skeleton className=\"h-3 w-full\" />\n                            <Skeleton className=\"h-3 w-2/3\" />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : aiAdvice && aiAdvice.length > 0 ? (\n                    aiAdvice.map((advice: AIAdvice, index: number) => (\n                      <div key={index} className=\"border rounded-lg p-4 space-y-3\" data-testid={`ai-advice-${index}`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-foreground\">{advice.suggestion}</h3>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              Categoria: {advice.category}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(advice.priority)}`}>\n                              {advice.priority === 'high' ? 'Alta' : advice.priority === 'medium' ? 'Média' : 'Baixa'}\n                            </span>\n                            <p className=\"text-sm font-semibold text-success mt-1\">\n                              Economia: {formatCurrency(advice.potentialSavings)}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <h4 className=\"font-medium text-foreground mb-2\">Ações recomendadas:</h4>\n                          <ul className=\"space-y-1\">\n                            {advice.actionItems.map((action, actionIndex) => (\n                              <li key={actionIndex} className=\"text-sm text-muted-foreground flex items-start space-x-2\">\n                                <span className=\"text-primary mt-1\">•</span>\n                                <span>{action}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <i className=\"fas fa-lightbulb text-4xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"font-semibold text-foreground mb-2\">Dicas em preparação</h3>\n                      <p className=\"text-muted-foreground\">\n                        Estamos analisando seus dados financeiros para oferecer dicas personalizadas.\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-4 border-t\">\n                    <div className=\"bg-muted/20 rounded-lg p-4\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <i className=\"fas fa-info-circle text-primary\"></i>\n                        <span className=\"font-medium text-foreground\">Como funciona</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Nossa IA analisa seus padrões de gastos e receitas para identificar oportunidades de economia \n                        personalizadas para sua situação financeira familiar.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":7043},"client/src/components/dashboard/BillsTable.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Bill, Category } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar, Check, CreditCard, Edit, Plus } from \"lucide-react\";\n\ninterface BillsTableProps {\n  bills: Bill[];\n  categories: Category[];\n  onAddBill: () => void;\n}\n\nexport default function BillsTable({ bills, categories, onAddBill }: BillsTableProps) {\n  const [selectedBill, setSelectedBill] = useState<Bill | null>(null);\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n  const [paymentDate, setPaymentDate] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const markAsPaidMutation = useMutation({\n    mutationFn: async ({ billId, paymentData }: { billId: string; paymentData: any }) => {\n      return apiRequest(\"PATCH\", `/api/bills/${billId}`, { \n        isPaid: true, \n        paymentDate: paymentData.paymentDate,\n        paymentMethod: paymentData.paymentMethod\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Conta marcada como paga\",\n        description: \"O pagamento foi registrado com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      setIsPaymentModalOpen(false);\n      setSelectedBill(null);\n      setPaymentDate(\"\");\n      setPaymentMethod(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao marcar conta como paga.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getBillStatus = (bill: Bill) => {\n    const currentDate = new Date();\n    const currentDay = currentDate.getDate();\n    const daysUntilDue = bill.dueDay - currentDay;\n\n    if (bill.isPaid) {\n      return { status: \"Pago\", className: \"bg-success/10 text-success\", daysText: \"Pago\" };\n    }\n\n    if (daysUntilDue < 0) {\n      return { \n        status: \"Atrasado\", \n        className: \"bg-destructive/10 text-destructive\",\n        daysText: `Vencido há ${Math.abs(daysUntilDue)} dia(s)`\n      };\n    }\n\n    if (daysUntilDue === 0) {\n      return { \n        status: \"Vence hoje\", \n        className: \"bg-warning/10 text-warning\",\n        daysText: \"Vence hoje\"\n      };\n    }\n\n    if (daysUntilDue <= 3) {\n      return { \n        status: \"Pendente\", \n        className: \"bg-warning/10 text-warning\",\n        daysText: `Em ${daysUntilDue} dia(s)`\n      };\n    }\n\n    return { \n      status: \"Agendado\", \n      className: \"bg-muted/20 text-muted-foreground\",\n      daysText: `Em ${daysUntilDue} dia(s)`\n    };\n  };\n\n  const getCategoryIcon = (categoryId: string | null) => {\n    if (!categoryId) return \"fas fa-tag\";\n    const category = categories.find(c => c.id === categoryId);\n    return category?.icon || \"fas fa-tag\";\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(parseFloat(amount));\n  };\n\n  const formatDueDate = (dueDay: number) => {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1;\n    const currentYear = currentDate.getFullYear();\n    return `${dueDay.toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`;\n  };\n\n  const handlePaymentClick = (bill: Bill) => {\n    setSelectedBill(bill);\n    setPaymentDate(new Date().toISOString().split('T')[0]); // Today's date\n    setIsPaymentModalOpen(true);\n  };\n\n  const handlePaymentSubmit = () => {\n    if (selectedBill && paymentDate && paymentMethod) {\n      markAsPaidMutation.mutate({\n        billId: selectedBill.id,\n        paymentData: { paymentDate, paymentMethod }\n      });\n    }\n  };\n\n  const getPaymentMethods = () => [\n    { value: \"checking\", label: \"Conta Corrente\" },\n    { value: \"savings\", label: \"Poupança\" },\n    { value: \"credit_card\", label: \"Cartão de Crédito\" },\n    { value: \"debit_card\", label: \"Cartão de Débito\" },\n    { value: \"pix\", label: \"PIX\" },\n    { value: \"cash\", label: \"Dinheiro\" },\n    { value: \"bank_slip\", label: \"Boleto\" },\n  ];\n\n  return (\n    <>\n      <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-800 overflow-hidden\">\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-900 px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\n                <CreditCard className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Contas a Vencer</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Gerencie seus pagamentos e vencimentos</p>\n              </div>\n            </div>\n            <Button onClick={onAddBill} className=\"flex items-center gap-2\" data-testid=\"button-add-bill\">\n              <Plus size={16} />\n              Nova Conta\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800\">\n              <tr>\n                <th className=\"text-left py-4 px-6 text-sm font-medium text-gray-700 dark:text-gray-300\">Conta</th>\n                <th className=\"text-left py-4 px-6 text-sm font-medium text-gray-700 dark:text-gray-300\">Vencimento</th>\n                <th className=\"text-right py-4 px-6 text-sm font-medium text-gray-700 dark:text-gray-300\">Valor</th>\n                <th className=\"text-center py-4 px-6 text-sm font-medium text-gray-700 dark:text-gray-300\">Status</th>\n                <th className=\"text-center py-4 px-6 text-sm font-medium text-gray-700 dark:text-gray-300\">Ações</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              {bills.map((bill) => {\n                const billStatus = getBillStatus(bill);\n                return (\n                  <tr key={bill.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\" data-testid={`bill-row-${bill.id}`}>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl flex items-center justify-center\">\n                          <i className={`${getCategoryIcon(bill.categoryId)} text-blue-600 dark:text-blue-400 text-sm`}></i>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900 dark:text-white\">{bill.name}</p>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{bill.description}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar size={14} className=\"text-gray-400\" />\n                        <div>\n                          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                            {formatDueDate(bill.dueDay)}\n                          </span>\n                          <span className={`block text-xs ${billStatus.status === 'Atrasado' ? 'text-red-600 dark:text-red-400' : billStatus.status === 'Pendente' ? 'text-amber-600 dark:text-amber-400' : 'text-gray-500 dark:text-gray-400'}`}>\n                            {billStatus.daysText}\n                          </span>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-6 text-right\">\n                      <span className=\"font-semibold text-lg text-gray-900 dark:text-white\">\n                        {formatCurrency(bill.amount)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-6 text-center\">\n                      <Badge \n                        variant={bill.isPaid ? \"default\" : billStatus.status === 'Atrasado' ? \"destructive\" : billStatus.status === 'Pendente' ? \"secondary\" : \"outline\"}\n                        className=\"font-medium\"\n                      >\n                        {billStatus.status}\n                      </Badge>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex items-center justify-center gap-2\">\n                        {!bill.isPaid ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handlePaymentClick(bill)}\n                            disabled={markAsPaidMutation.isPending}\n                            className=\"flex items-center gap-1 text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 border-green-200 dark:border-green-800 hover:bg-green-50 dark:hover:bg-green-900/20\"\n                            data-testid={`button-mark-paid-${bill.id}`}\n                          >\n                            <Check size={14} />\n                            Pagar\n                          </Button>\n                        ) : (\n                          <Badge variant=\"default\" className=\"bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300\">\n                            Pago\n                          </Badge>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200\"\n                          data-testid={`button-edit-${bill.id}`}\n                        >\n                          <Edit size={14} />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Modal de Pagamento */}\n      <Dialog open={isPaymentModalOpen} onOpenChange={setIsPaymentModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Check className=\"text-green-600\" size={20} />\n              Registrar Pagamento\n            </DialogTitle>\n            <DialogDescription>\n              Registre o pagamento da conta \"{selectedBill?.name}\" informando a data e meio de pagamento.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"payment-date\">Data do Pagamento</Label>\n              <Input\n                id=\"payment-date\"\n                type=\"date\"\n                value={paymentDate}\n                onChange={(e) => setPaymentDate(e.target.value)}\n                data-testid=\"payment-date-input\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"payment-method\">Meio de Pagamento</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                <SelectTrigger data-testid=\"payment-method-select\">\n                  <SelectValue placeholder=\"Selecione o meio de pagamento\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {getPaymentMethods().map((method) => (\n                    <SelectItem key={method.value} value={method.value}>\n                      {method.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {selectedBill && (\n              <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Resumo do Pagamento:</p>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">{selectedBill.name}</span>\n                  <span className=\"font-semibold text-lg\">{formatCurrency(selectedBill.amount)}</span>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsPaymentModalOpen(false)}>\n              Cancelar\n            </Button>\n            <Button \n              onClick={handlePaymentSubmit} \n              disabled={!paymentDate || !paymentMethod || markAsPaidMutation.isPending}\n              className=\"flex items-center gap-2\"\n              data-testid=\"confirm-payment-button\"\n            >\n              {markAsPaidMutation.isPending ? \"Registrando...\" : (\n                <>\n                  <Check size={16} />\n                  Confirmar Pagamento\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":13845},"client/src/components/dashboard/CalendarView.tsx":{"content":"import { useState } from \"react\";\nimport type { Bill, Income } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, ChevronLeft, ChevronRight, DollarSign, CreditCard, AlertCircle } from \"lucide-react\";\n\ninterface CalendarViewProps {\n  bills: Bill[];\n  incomes: Income[];\n}\n\nexport default function CalendarView({ bills, incomes }: CalendarViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n  const today = new Date().getDate();\n\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n  const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(currentYear, currentMonth - 1, 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentYear, currentMonth + 1, 1));\n  };\n\n  const getEventsForDay = (day: number) => {\n    const events = [];\n\n    // Check for bills due on this day\n    const dayBills = bills.filter(bill => bill.dueDay === day);\n    if (dayBills.length > 0) {\n      const isOverdue = day < today;\n      events.push({\n        type: isOverdue ? 'overdue' : 'bill',\n        color: isOverdue ? 'bg-red-500' : 'bg-amber-500',\n        title: `${dayBills.length} conta(s)`\n      });\n    }\n\n    // Check for incomes on this day\n    const dayIncomes = incomes.filter(income => income.receiptDay === day);\n    if (dayIncomes.length > 0) {\n      events.push({\n        type: 'income',\n        color: 'bg-green-500',\n        title: `Receita - ${dayIncomes[0].source}`\n      });\n    }\n\n    return events;\n  };\n\n  const renderCalendarDays = () => {\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      const prevMonthDate = new Date(currentYear, currentMonth, 0).getDate() - firstDayOfMonth + i + 1;\n      days.push(\n        <div key={`prev-${i}`} className=\"p-3 text-gray-400 dark:text-gray-600 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n          <span className=\"text-sm\">{prevMonthDate}</span>\n        </div>\n      );\n    }\n\n    // Add days of the current month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const events = getEventsForDay(day);\n      const isToday = day === today && currentMonth === new Date().getMonth() && currentYear === new Date().getFullYear();\n\n      days.push(\n        <div \n          key={day} \n          className={`p-3 relative min-h-[60px] rounded-lg transition-all duration-200 hover:bg-gray-100 dark:hover:bg-gray-700/50 ${\n            isToday \n              ? 'bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 text-indigo-800 dark:text-indigo-300 border-2 border-indigo-300 dark:border-indigo-700 font-semibold' \n              : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700'\n          }`}\n          data-testid={`calendar-day-${day}`}\n        >\n          <span className={`text-sm font-medium ${isToday ? 'text-indigo-800 dark:text-indigo-300' : 'text-gray-900 dark:text-white'}`}>{day}</span>\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {events.map((event, index) => {\n              const isIncome = event.type === 'income';\n              const isOverdue = event.type === 'overdue';\n              return (\n                <div \n                  key={index}\n                  className={`w-1.5 h-1.5 rounded-full ${\n                    isIncome \n                      ? 'bg-green-500' \n                      : isOverdue \n                        ? 'bg-red-500' \n                        : 'bg-amber-500'\n                  }`}\n                  title={event.title}\n                ></div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    }\n\n    return days;\n  };\n\n  const monthNames = [\n    'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',\n    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'\n  ];\n\n  const weekDays = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-800 overflow-hidden\">\n      <div className=\"bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-indigo-100 dark:bg-indigo-900/20 rounded-lg\">\n              <Calendar className=\"w-5 h-5 text-indigo-600 dark:text-indigo-400\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {monthNames[currentMonth]} {currentYear}\n              </h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Visualize vencimentos e receitas</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={previousMonth}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-previous-month\"\n            >\n              <ChevronLeft size={16} />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={nextMonth}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-next-month\"\n            >\n              <ChevronRight size={16} />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        {/* Week day headers */}\n        <div className=\"grid grid-cols-7 gap-2 text-center text-sm mb-4\">\n          {weekDays.map((day) => (\n            <div key={day} className=\"p-3 font-semibold text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        {/* Calendar grid */}\n        <div className=\"grid grid-cols-7 gap-2 text-sm mb-6\">\n          {renderCalendarDays()}\n        </div>\n\n        {/* Legend */}\n        <div className=\"flex items-center justify-center flex-wrap gap-6 mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"p-1.5 bg-green-100 dark:bg-green-900/20 rounded-full\">\n              <DollarSign className=\"w-3 h-3 text-green-600 dark:text-green-400\" />\n            </div>\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Receitas</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"p-1.5 bg-amber-100 dark:bg-amber-900/20 rounded-full\">\n              <CreditCard className=\"w-3 h-3 text-amber-600 dark:text-amber-400\" />\n            </div>\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Vencimentos</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"p-1.5 bg-red-100 dark:bg-red-900/20 rounded-full\">\n              <AlertCircle className=\"w-3 h-3 text-red-600 dark:text-red-400\" />\n            </div>\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Atrasados</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7511},"client/src/components/dashboard/ChartsSection.tsx":{"content":"import { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, AreaChart, Area, LineChart, Line } from 'recharts';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ChartsSectionProps {\n  data: {\n    categoryBreakdown: Array<{\n      id: string;\n      name: string;\n      color: string;\n      totalAmount: number;\n      percentage: number;\n    }>;\n    monthlyIncome: number;\n    monthlyExpenses: number;\n  };\n}\n\nexport default function ChartsSection({ data }: ChartsSectionProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Cores vibrantes para os gráficos\n  const VIBRANT_COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#EC4899', '#84CC16', '#F97316', '#6366F1'];\n\n  // Mock data for monthly trend with more vibrant data\n  const monthlyTrendData = [\n    { month: 'Jul', receitas: 8000, gastos: 6500, economia: 1500 },\n    { month: 'Ago', receitas: 8200, gastos: 6800, economia: 1400 },\n    { month: 'Set', receitas: 8100, gastos: 7100, economia: 1000 },\n    { month: 'Out', receitas: 8300, gastos: 6900, economia: 1400 },\n    { month: 'Nov', receitas: 8400, gastos: 6750, economia: 1650 },\n    { month: 'Dez', receitas: 8600, gastos: 6950, economia: 1650 },\n  ];\n\n  // Preparar dados do gráfico de pizza com cores vibrantes\n  const pieData = data.categoryBreakdown.map((category, index) => ({\n    ...category,\n    color: category.color || VIBRANT_COLORS[index % VIBRANT_COLORS.length],\n    value: category.totalAmount\n  }));\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 0\n    }).format(value);\n  };\n\n  // Função para lidar com cliques nos gráficos\n  const handleChartClick = (data: any, chartType: string) => {\n    toast({\n      title: \"Navegando para detalhes\",\n      description: `Visualizando dados de ${chartType}`,\n    });\n    \n    if (chartType === 'categoria') {\n      setLocation('/relatorios');\n    } else if (chartType === 'mensal') {\n      setLocation('/calendario');\n    }\n  };\n\n  const handlePieClick = (data: any, index: number) => {\n    toast({\n      title: `Categoria: ${data.name}`,\n      description: `${formatCurrency(data.value)} (${data.percentage.toFixed(1)}%)`,\n    });\n    setLocation('/contas');\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n      {/* Enhanced Monthly Trend Chart */}\n      <div className=\"lg:col-span-2 bg-card rounded-xl p-6 shadow-lg border border-border hover:shadow-xl transition-shadow\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">Evolução Mensal</h3>\n            <p className=\"text-sm text-muted-foreground\">Clique nas barras para ver detalhes no calendário</p>\n          </div>\n          <select className=\"text-sm border border-border rounded-lg px-3 py-1 bg-background\" data-testid=\"chart-period-selector\">\n            <option>Últimos 6 meses</option>\n            <option>Último ano</option>\n          </select>\n        </div>\n        \n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart \n              data={monthlyTrendData} \n              onClick={(data: any) => handleChartClick(data, 'mensal')}\n              style={{ cursor: 'pointer' }}\n            >\n              <defs>\n                <linearGradient id=\"colorReceitas\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0.1}/>\n                </linearGradient>\n                <linearGradient id=\"colorGastos\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#EF4444\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#EF4444\" stopOpacity={0.1}/>\n                </linearGradient>\n                <linearGradient id=\"colorEconomia\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" opacity={0.5} />\n              <XAxis \n                dataKey=\"month\" \n                stroke=\"#64748b\" \n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n              />\n              <YAxis \n                stroke=\"#64748b\" \n                tickFormatter={formatCurrency} \n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n              />\n              <Tooltip \n                formatter={(value: number, name: string) => [formatCurrency(value), name]}\n                labelStyle={{ color: '#1f2937', fontWeight: 'bold' }}\n                contentStyle={{ \n                  backgroundColor: '#ffffff',\n                  border: '2px solid #e5e7eb',\n                  borderRadius: '12px',\n                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'\n                }}\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"receitas\" \n                stroke=\"#10B981\" \n                strokeWidth={3}\n                fillOpacity={1} \n                fill=\"url(#colorReceitas)\" \n                name=\"Receitas\"\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"gastos\" \n                stroke=\"#EF4444\" \n                strokeWidth={3}\n                fillOpacity={1} \n                fill=\"url(#colorGastos)\" \n                name=\"Gastos\"\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"economia\" \n                stroke=\"#3B82F6\" \n                strokeWidth={3}\n                fillOpacity={1} \n                fill=\"url(#colorEconomia)\" \n                name=\"Economia\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Interactive Pie Chart */}\n      <div className=\"bg-card rounded-xl p-6 shadow-lg border border-border hover:shadow-xl transition-shadow\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">Distribuição por Categoria</h3>\n            <p className=\"text-xs text-muted-foreground\">Clique nas fatias para detalhes</p>\n          </div>\n        </div>\n        \n        {pieData.length > 0 ? (\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={40}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                  onClick={handlePieClick}\n                  style={{ cursor: 'pointer' }}\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`} \n                      fill={entry.color}\n                      stroke=\"#ffffff\"\n                      strokeWidth={2}\n                      style={{\n                        filter: 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))',\n                        transition: 'all 0.3s ease'\n                      }}\n                    />\n                  ))}\n                </Pie>\n                <Tooltip \n                  formatter={(value: number) => formatCurrency(value)}\n                  contentStyle={{ \n                    backgroundColor: '#ffffff',\n                    border: '2px solid #e5e7eb',\n                    borderRadius: '12px',\n                    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        ) : (\n          <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n            <div className=\"text-center\">\n              <i className=\"fas fa-chart-pie text-4xl mb-4 opacity-50\"></i>\n              <p className=\"text-sm\">Nenhuma categoria encontrada</p>\n            </div>\n          </div>\n        )}\n\n        {/* Enhanced Category Legend */}\n        <div className=\"mt-4 space-y-2 max-h-32 overflow-y-auto\">\n          {pieData.slice(0, 5).map((category, index) => (\n            <div \n              key={category.id} \n              className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/20 cursor-pointer transition-colors\"\n              onClick={() => handleChartClick(category, 'categoria')}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full shadow-sm\" \n                  style={{ backgroundColor: category.color }}\n                ></div>\n                <span className=\"text-xs font-medium truncate\">{category.name}</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xs font-bold\">{formatCurrency(category.totalAmount)}</div>\n                <div className=\"text-xs text-muted-foreground\">{category.percentage.toFixed(1)}%</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9624},"client/src/components/dashboard/FinancialSummaryCards.tsx":{"content":"import { TrendingUp, CreditCard, Wallet, Clock } from \"lucide-react\";\n\ninterface FinancialSummaryCardsProps {\n  data: {\n    monthlyIncome: number;\n    monthlyExpenses: number;\n    monthlyBalance: number;\n    upcomingBills: number;\n  };\n}\n\nexport default function FinancialSummaryCards({ data }: FinancialSummaryCardsProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {/* Total Income */}\n      <div className=\"relative bg-white dark:bg-gray-900 border-l-4 border-emerald-500 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 group hover:-translate-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1 font-medium\">Receitas do Mês</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"monthly-income\">\n              {formatCurrency(data.monthlyIncome)}\n            </p>\n            <p className=\"text-xs text-emerald-600 dark:text-emerald-400 mt-1 flex items-center gap-1\">\n              <TrendingUp size={12} /> +5.2% vs mês anterior\n            </p>\n          </div>\n          <div className=\"w-14 h-14 bg-emerald-100 dark:bg-emerald-900/20 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n            <TrendingUp className=\"text-emerald-600 dark:text-emerald-400\" size={24} />\n          </div>\n        </div>\n      </div>\n\n      {/* Total Expenses */}\n      <div className=\"relative bg-white dark:bg-gray-900 border-l-4 border-red-500 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 group hover:-translate-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1 font-medium\">Gastos do Mês</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"monthly-expenses\">\n              {formatCurrency(data.monthlyExpenses)}\n            </p>\n            <p className=\"text-xs text-red-600 dark:text-red-400 mt-1 flex items-center gap-1\">\n              <TrendingUp size={12} /> +2.1% vs mês anterior\n            </p>\n          </div>\n          <div className=\"w-14 h-14 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n            <CreditCard className=\"text-red-600 dark:text-red-400\" size={24} />\n          </div>\n        </div>\n      </div>\n\n      {/* Balance */}\n      <div className=\"relative bg-white dark:bg-gray-900 border-l-4 border-blue-500 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 group hover:-translate-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1 font-medium\">Saldo do Mês</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"monthly-balance\">\n              {formatCurrency(data.monthlyBalance)}\n            </p>\n            <p className=\"text-xs text-blue-600 dark:text-blue-400 mt-1 flex items-center gap-1\">\n              <TrendingUp size={12} /> +12.3% vs mês anterior\n            </p>\n          </div>\n          <div className=\"w-14 h-14 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n            <Wallet className=\"text-blue-600 dark:text-blue-400\" size={24} />\n          </div>\n        </div>\n      </div>\n\n      {/* Upcoming Bills */}\n      <div className=\"relative bg-white dark:bg-gray-900 border-l-4 border-amber-500 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 group hover:-translate-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1 font-medium\">Próximos Vencimentos</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"upcoming-bills\">\n              {data.upcomingBills} contas\n            </p>\n            <p className=\"text-xs text-amber-600 dark:text-amber-400 mt-1\">Próximos 7 dias</p>\n          </div>\n          <div className=\"w-14 h-14 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n            <Clock className=\"text-amber-600 dark:text-amber-400\" size={24} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4762},"client/src/components/dashboard/IncomePanel.tsx":{"content":"import type { Income } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DollarSign, Plus, User, Users } from \"lucide-react\";\n\ninterface IncomePanelProps {\n  incomes: Income[];\n  onAddIncome: () => void;\n}\n\nexport default function IncomePanel({ incomes, onAddIncome }: IncomePanelProps) {\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(parseFloat(amount));\n  };\n\n  const getIncomesBySource = () => {\n    const danielIncomes = incomes.filter(i => i.source === \"Daniel\");\n    const mariaIncomes = incomes.filter(i => i.source === \"Maria\");\n    const extraIncomes = incomes.filter(i => i.source === \"Extra\");\n\n    return { danielIncomes, mariaIncomes, extraIncomes };\n  };\n\n  const { danielIncomes, mariaIncomes, extraIncomes } = getIncomesBySource();\n\n  const formatReceiptDate = (day: number | null) => {\n    if (!day) return \"\";\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1;\n    return `${day.toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-800 overflow-hidden\">\n      <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-900 px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-green-100 dark:bg-green-900/20 rounded-lg\">\n              <DollarSign className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Receitas</h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Acompanhe suas fontes de renda</p>\n            </div>\n          </div>\n          <Button variant=\"outline\" onClick={onAddIncome} className=\"flex items-center gap-2\" data-testid=\"button-manage-income\">\n            <Plus size={16} />\n            Gerenciar\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-4\">\n        {/* Daniel's Income */}\n        {danielIncomes.length > 0 && (\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/10 dark:to-indigo-900/10 border-l-4 border-blue-500 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center\">\n                <User className=\"text-white\" size={18} />\n              </div>\n              <div>\n                <p className=\"font-semibold text-gray-900 dark:text-white\">Daniel</p>\n                <Badge variant=\"secondary\" className=\"text-xs\">Salário Principal</Badge>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {danielIncomes.map((income) => (\n                <div key={income.id} className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 flex items-center justify-between\" data-testid={`income-daniel-${income.id}`}>\n                  <div>\n                    <span className=\"text-gray-700 dark:text-gray-300 font-medium\">\n                      {income.description}\n                    </span>\n                    {income.receiptDay && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                        Recebimento: {formatReceiptDate(income.receiptDay)}\n                      </p>\n                    )}\n                  </div>\n                  <span className=\"font-bold text-lg text-green-600 dark:text-green-400\">\n                    {formatCurrency(income.amount)}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Wife's Income */}\n        {mariaIncomes.length > 0 && (\n          <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/10 dark:to-pink-900/10 border-l-4 border-purple-500 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center\">\n                <User className=\"text-white\" size={18} />\n              </div>\n              <div>\n                <p className=\"font-semibold text-gray-900 dark:text-white\">Maria</p>\n                <Badge variant=\"secondary\" className=\"text-xs\">Salário Principal</Badge>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {mariaIncomes.map((income) => (\n                <div key={income.id} className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 flex items-center justify-between\" data-testid={`income-maria-${income.id}`}>\n                  <div>\n                    <span className=\"text-gray-700 dark:text-gray-300 font-medium\">\n                      {income.description}\n                    </span>\n                    {income.receiptDay && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                        Recebimento: {formatReceiptDate(income.receiptDay)}\n                      </p>\n                    )}\n                  </div>\n                  <span className=\"font-bold text-lg text-green-600 dark:text-green-400\">\n                    {formatCurrency(income.amount)}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Extra Income */}\n        <div className=\"bg-gradient-to-r from-amber-50 to-yellow-50 dark:from-amber-900/10 dark:to-yellow-900/10 border-l-4 border-amber-500 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-amber-500 to-yellow-600 rounded-full flex items-center justify-center\">\n                <Plus className=\"text-white\" size={18} />\n              </div>\n              <div>\n                <p className=\"font-semibold text-gray-900 dark:text-white\">Receitas Extras</p>\n                <Badge variant=\"outline\" className=\"text-xs border-amber-300 text-amber-700 dark:text-amber-300\">Renda Adicional</Badge>\n              </div>\n            </div>\n            <Button \n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onAddIncome}\n              className=\"text-amber-600 dark:text-amber-400 hover:text-amber-700 dark:hover:text-amber-300\"\n              data-testid=\"button-add-extra-income\"\n            >\n              <Plus size={16} />\n            </Button>\n          </div>\n          \n          {extraIncomes.length > 0 ? (\n            <div className=\"space-y-3\">\n              {extraIncomes.map((income) => (\n                <div key={income.id} className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 flex items-center justify-between\" data-testid={`income-extra-${income.id}`}>\n                  <span className=\"text-gray-700 dark:text-gray-300 font-medium\">{income.description}</span>\n                  <span className=\"font-bold text-lg text-amber-600 dark:text-amber-400\">\n                    {formatCurrency(income.amount)}\n                  </span>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">PLR previsto para março</p>\n              <p className=\"font-semibold text-amber-600 dark:text-amber-400\">R$ 1.500 (estimativa)</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7982},"client/src/components/dashboard/NotificationsPanel.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Notification } from \"@shared/schema\";\n\ninterface NotificationsPanelProps {\n  notifications: Notification[];\n  userId: string;\n}\n\nexport default function NotificationsPanel({ notifications, userId }: NotificationsPanelProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"PATCH\", `/api/notifications/${userId}/read-all`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Notificações marcadas como lidas\",\n        description: \"Todas as notificações foram atualizadas.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao marcar notificações como lidas.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'warning':\n        return 'fas fa-exclamation-triangle text-warning';\n      case 'error':\n        return 'fas fa-times-circle text-destructive';\n      case 'success':\n        return 'fas fa-check-circle text-success';\n      default:\n        return 'fas fa-bell text-secondary';\n    }\n  };\n\n  const getNotificationBg = (type: string) => {\n    switch (type) {\n      case 'warning':\n        return 'bg-warning/5 border-warning/20';\n      case 'error':\n        return 'bg-destructive/5 border-destructive/20';\n      case 'success':\n        return 'bg-success/5 border-success/20';\n      default:\n        return 'bg-secondary/5 border-secondary/20';\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days} dia(s) atrás`;\n    } else if (hours > 0) {\n      return `${hours} hora(s) atrás`;\n    } else if (minutes > 0) {\n      return `${minutes} minuto(s) atrás`;\n    } else {\n      return 'Agora';\n    }\n  };\n\n  const unreadNotifications = notifications.filter(n => !n.isRead);\n\n  return (\n    <div className=\"bg-card rounded-xl p-6 shadow-sm border border-border\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Notificações</h3>\n        {unreadNotifications.length > 0 && (\n          <button \n            className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n            onClick={() => markAllAsReadMutation.mutate()}\n            disabled={markAllAsReadMutation.isPending}\n            data-testid=\"button-mark-all-read\"\n          >\n            Marcar todas como lidas\n          </button>\n        )}\n      </div>\n\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {notifications.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-bell-slash text-4xl text-muted-foreground mb-2\"></i>\n            <p className=\"text-muted-foreground\">Nenhuma notificação</p>\n          </div>\n        ) : (\n          notifications.slice(0, 10).map((notification) => (\n            <div \n              key={notification.id} \n              className={`flex items-start space-x-3 p-3 border rounded-lg cursor-pointer transition-opacity ${\n                notification.isRead ? 'opacity-60' : ''\n              } ${getNotificationBg(notification.type)}`}\n              onClick={() => !notification.isRead && markAsReadMutation.mutate(notification.id)}\n              data-testid={`notification-${notification.id}`}\n            >\n              <div className=\"w-8 h-8 bg-opacity-10 rounded-full flex items-center justify-center flex-shrink-0\">\n                <i className={`${getNotificationIcon(notification.type)} text-sm`}></i>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-foreground\">{notification.title}</p>\n                <p className=\"text-xs text-muted-foreground\">{notification.message}</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {formatTimeAgo(notification.createdAt!)}\n                </p>\n              </div>\n              {!notification.isRead && (\n                <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-2\"></div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-6 pt-6 border-t border-border\">\n        <h4 className=\"font-medium text-foreground mb-3\">Ações Rápidas</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <button className=\"p-4 bg-primary/10 hover:bg-primary/20 rounded-lg transition-colors text-left\" data-testid=\"button-add-bill-quick\">\n            <i className=\"fas fa-plus text-primary mb-2\"></i>\n            <p className=\"text-sm font-medium text-foreground\">Adicionar Conta</p>\n          </button>\n          \n          <button className=\"p-4 bg-success/10 hover:bg-success/20 rounded-lg transition-colors text-left\" data-testid=\"button-add-income-quick\">\n            <i className=\"fas fa-arrow-up text-success mb-2\"></i>\n            <p className=\"text-sm font-medium text-foreground\">Registrar Receita</p>\n          </button>\n          \n          <button className=\"p-4 bg-secondary/10 hover:bg-secondary/20 rounded-lg transition-colors text-left\" data-testid=\"button-view-reports\">\n            <i className=\"fas fa-chart-bar text-secondary mb-2\"></i>\n            <p className=\"text-sm font-medium text-foreground\">Ver Relatórios</p>\n          </button>\n          \n          <button className=\"p-4 bg-accent/10 hover:bg-accent/20 rounded-lg transition-colors text-left\" data-testid=\"button-export-data\">\n            <i className=\"fas fa-download text-accent mb-2\"></i>\n            <p className=\"text-sm font-medium text-foreground\">Exportar Dados</p>\n          </button>\n        </div>\n\n        {/* Integration Settings */}\n        <div className=\"mt-6 pt-6 border-t border-border\">\n          <h4 className=\"font-medium text-foreground mb-3\">Integrações</h4>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-calendar-alt text-muted-foreground\"></i>\n                <span className=\"text-sm\">Google Agenda</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                <span className=\"text-xs text-success\">Conectado</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-envelope text-muted-foreground\"></i>\n                <span className=\"text-sm\">Email Notifications</span>\n              </div>\n              <button className=\"text-xs text-primary hover:text-primary/80\" data-testid=\"button-configure-email\">\n                Configurar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7776},"client/src/components/layout/MainLayout.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuBadge,\n  SidebarProvider,\n  SidebarTrigger,\n  SidebarInset,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useState } from \"react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  LayoutDashboard,\n  FileText,\n  TrendingUp,\n  CalendarDays,\n  BellRing,\n  ChevronDown,\n  UserPen,\n  Settings,\n  LogOut,\n  DollarSign,\n  Users,\n  Eye\n} from \"lucide-react\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  const [location, setLocation] = useLocation();\n  const [notificationsOpen, setNotificationsOpen] = useState(false);\n  const userId = \"default-user-id\";\n\n  const markNotificationAsRead = async (notificationId: string) => {\n    // TODO: Implement API call to mark notification as read\n    console.log('Marking notification as read:', notificationId);\n    // Invalidate and refetch notifications\n    queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n  };\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\", userId],\n    refetchInterval: 30000,\n  });\n\n  const unreadCount = Array.isArray(notifications) ? notifications.filter((n: any) => !n.isRead).length : 0;\n\n  const navigationItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: LayoutDashboard,\n      isActive: location === \"/\" || location === \"/dashboard\"\n    },\n    {\n      title: \"Contas\",\n      url: \"/contas\",\n      icon: FileText,\n      isActive: location === \"/contas\"\n    },\n    {\n      title: \"Relatórios\",\n      url: \"/relatorios\",\n      icon: TrendingUp,\n      isActive: location === \"/relatorios\"\n    },\n    {\n      title: \"Calendário\",\n      url: \"/calendario\",\n      icon: CalendarDays,\n      isActive: location === \"/calendario\"\n    }\n  ];\n\n  return (\n    <SidebarProvider defaultOpen={true}>\n      <Sidebar collapsible=\"icon\" variant=\"sidebar\">\n        <SidebarHeader className=\"group-data-[collapsible=icon]:px-2\">\n          <div className=\"flex items-center space-x-2 px-2 group-data-[collapsible=icon]:space-x-0 group-data-[collapsible=icon]:justify-center\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-primary/80 rounded-xl flex items-center justify-center shadow-lg shrink-0\">\n              <DollarSign className=\"text-white\" size={20} />\n            </div>\n            <div className=\"flex flex-col group-data-[collapsible=icon]:hidden\">\n              <div className=\"flex items-center gap-1\">\n                <DollarSign className=\"text-primary\" size={16} />\n                <h1 className=\"text-lg font-semibold text-foreground\">SantosFinance</h1>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Gestão Financeira</p>\n            </div>\n          </div>\n        </SidebarHeader>\n        \n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Navegação</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {navigationItems.map((item) => (\n                  <SidebarMenuItem key={item.url}>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <SidebarMenuButton \n                          onClick={() => setLocation(item.url)}\n                          isActive={item.isActive}\n                          className=\"group hover:bg-accent transition-colors data-[collapsible=icon]:justify-center\"\n                          data-testid={`nav-${item.title.toLowerCase()}`}\n                        >\n                          <item.icon size={16} className=\"shrink-0\" />\n                          <span className=\"group-data-[collapsible=icon]:sr-only transition-opacity\">{item.title}</span>\n                        </SidebarMenuButton>\n                      </TooltipTrigger>\n                      <TooltipContent side=\"right\" className=\"group-data-[collapsible=icon]:block hidden\">\n                        <p>{item.title}</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </SidebarMenuItem>\n                ))}\n                \n                {/* Notificações com badge */}\n                <SidebarMenuItem>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <SidebarMenuButton\n                        onClick={() => setLocation(\"/notificacoes\")}\n                        isActive={location === \"/notificacoes\"}\n                        className=\"group hover:bg-accent transition-colors data-[collapsible=icon]:justify-center relative\"\n                        data-testid=\"nav-notifications\"\n                      >\n                        <BellRing size={16} className=\"shrink-0\" />\n                        <span className=\"group-data-[collapsible=icon]:sr-only transition-opacity\">Notificações</span>\n                        {unreadCount > 0 && (\n                          <SidebarMenuBadge className=\"group-data-[collapsible=icon]:absolute group-data-[collapsible=icon]:-top-1 group-data-[collapsible=icon]:-right-1 group-data-[collapsible=icon]:h-4 group-data-[collapsible=icon]:w-4 group-data-[collapsible=icon]:text-xs\">\n                            {unreadCount > 9 ? \"9+\" : unreadCount}\n                          </SidebarMenuBadge>\n                        )}\n                      </SidebarMenuButton>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\" className=\"group-data-[collapsible=icon]:block hidden\">\n                      <p>Notificações {unreadCount > 0 ? `(${unreadCount})` : \"\"}</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        <SidebarFooter>\n          {/* Footer vazio - dados do usuário movidos para o header */}\n        </SidebarFooter>\n      </Sidebar>\n\n      <SidebarInset>\n        <header className=\"sticky top-0 z-50 flex h-16 shrink-0 items-center gap-4 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 px-4\">\n          <SidebarTrigger className=\"-ml-1\" />\n          <div className=\"flex items-center gap-2 flex-1\">\n            <h2 className=\"text-lg font-semibold\">\n              {navigationItems.find(item => item.isActive)?.title || \"Dashboard\"}\n            </h2>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            {/* Sino de notificações com dropdown */}\n            <DropdownMenu open={notificationsOpen} onOpenChange={setNotificationsOpen}>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative h-9 w-9 rounded-full hover:bg-accent\"\n                  data-testid=\"notifications-button\"\n                >\n                  <BellRing size={16} />\n                  {unreadCount > 0 && (\n                    <Badge\n                      variant=\"destructive\"\n                      className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                    >\n                      {unreadCount > 9 ? \"9+\" : unreadCount}\n                    </Badge>\n                  )}\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-80 max-h-96 overflow-y-auto\">\n                <DropdownMenuLabel>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Notificações</span>\n                    {unreadCount > 0 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {unreadCount} não lidas\n                      </Badge>\n                    )}\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {Array.isArray(notifications) && notifications.length > 0 ? (\n                  notifications.slice(0, 5).map((notification: any) => (\n                    <DropdownMenuItem\n                      key={notification.id}\n                      className=\"cursor-pointer p-3 flex flex-col items-start space-y-1\"\n                      onClick={() => markNotificationAsRead(notification.id)}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span className=\"text-sm font-medium\">{notification.title}</span>\n                        {!notification.isRead && (\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                        {notification.message}\n                      </p>\n                    </DropdownMenuItem>\n                  ))\n                ) : (\n                  <div className=\"p-4 text-center text-muted-foreground\">\n                    <BellRing className=\"mx-auto mb-2 opacity-50\" size={32} />\n                    <p className=\"text-sm\">Nenhuma notificação</p>\n                  </div>\n                )}\n                {Array.isArray(notifications) && notifications.length > 5 && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => setLocation(\"/notificacoes\")}>\n                      <Eye size={16} className=\"mr-2\" />\n                      Ver todas as notificações\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n            \n            {/* Avatar do usuário com dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center gap-2 cursor-pointer hover:bg-accent rounded-lg p-2 transition-colors\" data-testid=\"user-avatar\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground font-semibold\">\n                      D\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden sm:block\">\n                    <p className=\"text-sm font-medium leading-none\">Daniel</p>\n                    <p className=\"text-xs text-muted-foreground\">Administrador</p>\n                  </div>\n                  <ChevronDown size={12} className=\"text-muted-foreground\" />\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuLabel>Minha Conta</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => setLocation(\"/perfil\")} data-testid=\"edit-profile\">\n                  <UserPen size={16} className=\"mr-2\" />\n                  Editar Perfil\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setLocation(\"/configuracoes\")} className=\"opacity-50 cursor-not-allowed\">\n                  <Settings size={16} className=\"mr-2\" />\n                  Configurações (em breve)\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => window.location.href = \"/api/logout\"}\n                  className=\"text-red-600 focus:text-red-600\"\n                  data-testid=\"logout-button\"\n                >\n                  <LogOut size={16} className=\"mr-2\" />\n                  Sair\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n        \n        <main className=\"flex-1 overflow-auto\">\n          {children}\n        </main>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}","size_bytes":12561},"client/src/components/modals/AddBillModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertBillSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport type { Category } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst addBillSchema = insertBillSchema.extend({\n  amount: z.string().min(1, \"Valor é obrigatório\").regex(/^\\d+(\\.\\d{2})?$/, \"Formato inválido (ex: 150.00)\"),\n  dueDay: z.string().min(1, \"Dia do vencimento é obrigatório\").transform(Number),\n});\n\ninterface AddBillModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  categories: Category[];\n  userId: string;\n}\n\nexport default function AddBillModal({ isOpen, onClose, categories, userId }: AddBillModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof addBillSchema>>({\n    resolver: zodResolver(addBillSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      amount: \"\",\n      dueDay: \"\",\n      categoryId: \"\",\n      isRecurring: true,\n    },\n  });\n\n  const createBillMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof addBillSchema>) => {\n      return apiRequest(\"POST\", `/api/bills/${userId}`, {\n        ...data,\n        amount: parseFloat(data.amount).toFixed(2),\n        dueDay: Number(data.dueDay),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Conta criada com sucesso\",\n        description: \"A nova conta foi adicionada ao seu orçamento.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar conta\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof addBillSchema>) => {\n    createBillMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-plus text-primary\"></i>\n            </div>\n            <span>Adicionar Nova Conta</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nome da Conta</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: Energia Elétrica, Internet, Aluguel\" \n                      {...field} \n                      data-testid=\"input-bill-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição (opcional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: CPFL, Vivo, Apartamento\" \n                      {...field} \n                      data-testid=\"input-bill-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Valor (R$)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"150.00\" \n                        {...field} \n                        data-testid=\"input-bill-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dueDay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dia do Vencimento</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"15\" \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"31\" \n                        {...field} \n                        data-testid=\"input-bill-due-day\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"categoryId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Categoria</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-bill-category\">\n                        <SelectValue placeholder=\"Selecione uma categoria\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          <div className=\"flex items-center space-x-2\">\n                            <i className={category.icon} style={{ color: category.color }}></i>\n                            <span>{category.name}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isRecurring\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Conta recorrente</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Esta conta se repete todos os meses\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch \n                      checked={field.value} \n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-bill-recurring\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClose}\n                data-testid=\"button-cancel-bill\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createBillMutation.isPending}\n                data-testid=\"button-save-bill\"\n              >\n                {createBillMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Salvando...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-save mr-2\"></i>\n                    Salvar Conta\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8843},"client/src/components/modals/AddIncomeModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertIncomeSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst addIncomeSchema = insertIncomeSchema.extend({\n  amount: z.string().min(1, \"Valor é obrigatório\").regex(/^\\d+(\\.\\d{2})?$/, \"Formato inválido (ex: 2500.00)\"),\n  receiptDay: z.string().optional().transform((val) => val ? Number(val) : null),\n  date: z.date().optional().nullable(),\n});\n\ninterface AddIncomeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userId: string;\n}\n\nexport default function AddIncomeModal({ isOpen, onClose, userId }: AddIncomeModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState<Date>();\n\n  const form = useForm<z.infer<typeof addIncomeSchema>>({\n    resolver: zodResolver(addIncomeSchema),\n    defaultValues: {\n      source: \"Daniel\",\n      description: \"\",\n      amount: \"\",\n      receiptDay: \"\",\n      isRecurring: true,\n      date: null,\n    },\n  });\n\n  const isRecurring = form.watch(\"isRecurring\");\n  const source = form.watch(\"source\");\n\n  const createIncomeMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof addIncomeSchema>) => {\n      const payload = {\n        ...data,\n        amount: parseFloat(data.amount).toFixed(2),\n        receiptDay: data.receiptDay ? Number(data.receiptDay) : null,\n        date: data.date ? format(data.date, \"yyyy-MM-dd\") : null,\n      };\n      return apiRequest(\"POST\", `/api/incomes/${userId}`, payload);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Receita criada com sucesso\",\n        description: \"A nova receita foi adicionada ao seu orçamento.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/incomes\"] });\n      form.reset();\n      setSelectedDate(undefined);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar receita\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof addIncomeSchema>) => {\n    createIncomeMutation.mutate({\n      ...data,\n      date: selectedDate || null,\n    });\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setSelectedDate(undefined);\n    onClose();\n  };\n\n  const getDefaultDescription = (source: string, isRecurring: boolean) => {\n    if (source === \"Daniel\") {\n      return isRecurring ? \"Salário\" : \"Receita extra\";\n    }\n    if (source === \"Maria\") {\n      return isRecurring ? \"Salário\" : \"Receita extra\";\n    }\n    return \"PLR, Férias ou outras receitas\";\n  };\n\n  const getDefaultReceiptDay = (source: string) => {\n    if (source === \"Daniel\") return \"30\";\n    if (source === \"Maria\") return \"5\";\n    return \"\";\n  };\n\n  // Update description and receipt day when source changes\n  const handleSourceChange = (newSource: string) => {\n    form.setValue(\"source\", newSource);\n    form.setValue(\"description\", getDefaultDescription(newSource, isRecurring));\n    if (isRecurring) {\n      form.setValue(\"receiptDay\", getDefaultReceiptDay(newSource));\n    }\n  };\n\n  // Update description when recurring changes\n  const handleRecurringChange = (isRecurring: boolean) => {\n    form.setValue(\"isRecurring\", isRecurring);\n    form.setValue(\"description\", getDefaultDescription(source, isRecurring));\n    if (!isRecurring) {\n      form.setValue(\"receiptDay\", \"\");\n    } else {\n      form.setValue(\"receiptDay\", getDefaultReceiptDay(source));\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-success/10 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-plus text-success\"></i>\n            </div>\n            <span>Adicionar Nova Receita</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"source\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fonte da Receita</FormLabel>\n                  <Select onValueChange={handleSourceChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-income-source\">\n                        <SelectValue placeholder=\"Selecione a fonte\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Daniel\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 bg-secondary rounded-full flex items-center justify-center text-white text-xs font-medium\">D</div>\n                          <span>Daniel</span>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"Maria\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-white text-xs font-medium\">M</div>\n                          <span>Maria</span>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"Extra\">\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-star text-accent\"></i>\n                          <span>Receita Extra</span>\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: Salário, PLR, Férias\" \n                      {...field} \n                      data-testid=\"input-income-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Valor (R$)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"2500.00\" \n                      {...field} \n                      data-testid=\"input-income-amount\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isRecurring\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Receita recorrente</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Esta receita se repete todos os meses\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch \n                      checked={field.value} \n                      onCheckedChange={handleRecurringChange}\n                      data-testid=\"switch-income-recurring\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {isRecurring ? (\n              <FormField\n                control={form.control}\n                name=\"receiptDay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dia do Recebimento</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"5\" \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"31\" \n                        {...field} \n                        data-testid=\"input-income-receipt-day\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            ) : (\n              <div className=\"space-y-2\">\n                <FormLabel>Data do Recebimento</FormLabel>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full justify-start text-left font-normal\",\n                        !selectedDate && \"text-muted-foreground\"\n                      )}\n                      data-testid=\"button-income-date\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {selectedDate ? format(selectedDate, \"dd/MM/yyyy\") : \"Selecione a data\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={selectedDate}\n                      onSelect={setSelectedDate}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClose}\n                data-testid=\"button-cancel-income\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createIncomeMutation.isPending}\n                data-testid=\"button-save-income\"\n              >\n                {createIncomeMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Salvando...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-save mr-2\"></i>\n                    Salvar Receita\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11745},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/navigation.tsx":{"content":"export default function Navigation() {\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-sm bg-white/95 dark:bg-card/95\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-wallet text-white text-sm\"></i>\n              </div>\n              <h1 className=\"text-xl font-semibold text-foreground\">FinanFamily</h1>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <button className=\"text-primary hover:text-primary/80 font-medium flex items-center space-x-2\" data-testid=\"nav-dashboard-desktop\">\n              <i className=\"fas fa-home\"></i>\n              <span>Dashboard</span>\n            </button>\n            <button className=\"text-muted-foreground hover:text-foreground transition-colors flex items-center space-x-2\" data-testid=\"nav-bills-desktop\">\n              <i className=\"fas fa-receipt\"></i>\n              <span>Contas</span>\n            </button>\n            <button className=\"text-muted-foreground hover:text-foreground transition-colors flex items-center space-x-2\" data-testid=\"nav-reports-desktop\">\n              <i className=\"fas fa-chart-line\"></i>\n              <span>Relatórios</span>\n            </button>\n            <button className=\"text-muted-foreground hover:text-foreground transition-colors flex items-center space-x-2\" data-testid=\"nav-calendar-desktop\">\n              <i className=\"fas fa-calendar\"></i>\n              <span>Calendário</span>\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <button className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"notifications-button\">\n              <i className=\"fas fa-bell\"></i>\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground rounded-full text-xs flex items-center justify-center\">3</span>\n            </button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center text-white text-sm font-medium\">D</div>\n              <span className=\"hidden sm:inline text-sm font-medium\">Daniel</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2655},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/perfil.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Save, User, Mail, KeyRound, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst profileSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  username: z.string().min(3, \"Username deve ter pelo menos 3 caracteres\"),\n  currentPassword: z.string().optional(),\n  newPassword: z.string().optional(),\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  if (data.newPassword && data.newPassword !== data.confirmPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Senhas não coincidem\",\n  path: [\"confirmPassword\"]\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function PerfilPage() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: \"Daniel\",\n      email: \"daniel@email.com\",\n      username: \"daniel\",\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ProfileFormData) => {\n    setIsLoading(true);\n    try {\n      // TODO: Implement API call to update profile\n      console.log(\"Updating profile:\", data);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Perfil atualizado!\",\n        description: \"Suas informações foram atualizadas com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: \"Ocorreu um erro ao atualizar seu perfil. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Meu Perfil</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Gerencie suas informações pessoais e configurações de conta.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Profile Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Foto do Perfil</CardTitle>\n              <CardDescription>\n                Sua foto será exibida em todo o sistema.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <Avatar className=\"h-24 w-24\">\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl font-bold\">\n                    D\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"space-y-2 text-center\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Alterar Foto\n                  </Button>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Em breve você poderá alterar sua foto de perfil\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Informações Pessoais</CardTitle>\n                <CardDescription>\n                  Atualize suas informações pessoais e de contato.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Personal Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome Completo</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Seu nome completo\" {...field} data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"seu_username\" {...field} data-testid=\"input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"seu@email.com\" {...field} data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Separator />\n\n                    {/* Password Change Section */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-lg font-medium\">Alterar Senha</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Deixe em branco se não quiser alterar sua senha.\n                        </p>\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"currentPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Senha Atual</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Sua senha atual\" {...field} data-testid=\"input-current-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"newPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nova Senha</FormLabel>\n                              <FormControl>\n                                <Input type=\"password\" placeholder=\"Nova senha\" {...field} data-testid=\"input-new-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"confirmPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Confirmar Nova Senha</FormLabel>\n                              <FormControl>\n                                <Input type=\"password\" placeholder=\"Confirme a nova senha\" {...field} data-testid=\"input-confirm-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Form Actions */}\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => form.reset()}\n                        disabled={isLoading}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancelar\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={isLoading}\n                        className=\"min-w-[120px]\"\n                        data-testid=\"button-save\"\n                      >\n                        {isLoading ? (\n                          <>\n                            <i className=\"fas fa-spinner fa-spin w-4 h-4 mr-2\"></i>\n                            Salvando...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-save w-4 h-4 mr-2\"></i>\n                            Salvar Alterações\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Account Actions */}\n        <Card className=\"border-destructive/20\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Zona de Perigo</CardTitle>\n            <CardDescription>\n              Ações irreversíveis para sua conta.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between p-4 border border-destructive/20 rounded-lg\">\n              <div>\n                <h4 className=\"font-medium\">Excluir Conta</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Remova permanentemente sua conta e todos os dados associados.\n                </p>\n              </div>\n              <Button variant=\"destructive\" disabled data-testid=\"button-delete-account\">\n                Excluir Conta\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11249}},"version":1}